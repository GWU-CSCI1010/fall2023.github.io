[
  {
    "objectID": "realvnc-windows-connect.html",
    "href": "realvnc-windows-connect.html",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "RealVNC is a remote desktop software that allows you to access your computer from anywhere. Follow the steps below to establish a remote using RealVNC on your Windows computer.\n\n\nBefore you begin, ensure that you have already installed RealVNC on your Mac.\n\n\n\n\n\nLaunch VNC Viewer from Start. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC Viewer\n\n\n\n\n\nDon’t Sign up\n\n\n\n\n\nTo connect to a Raspberry Pi, launch RealVNC Viewer, enter the IP address on the box into the address bar, and hit Enter. You may need to enter the login credentials for the Raspberry Pi.\n\n\n\nIP Address on the Box\n\n\n\n\n\nConnect to the Pi\n\n\n\n\n\nEnter Credentials\n\n\n\n\n\nYou are now connected to the Raspberry Pi, and you can control it.\n\n\n\nRemote Connection Successfull\n\n\n\n\n\nTo disconnect from the Raspberry Pi, simply close the VNC Viewer window.\n\n\n\n\nYou have successfully established connection to the Pi, allowing you to access and control it with ease.\nFor more information and support, you can visit the RealVNC website.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "realvnc-windows-connect.html#prerequisites",
    "href": "realvnc-windows-connect.html#prerequisites",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "Before you begin, ensure that you have already installed RealVNC on your Mac."
  },
  {
    "objectID": "realvnc-windows-connect.html#establish-a-connection",
    "href": "realvnc-windows-connect.html#establish-a-connection",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "Launch VNC Viewer from Start. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC Viewer\n\n\n\n\n\nDon’t Sign up\n\n\n\n\n\nTo connect to a Raspberry Pi, launch RealVNC Viewer, enter the IP address on the box into the address bar, and hit Enter. You may need to enter the login credentials for the Raspberry Pi.\n\n\n\nIP Address on the Box\n\n\n\n\n\nConnect to the Pi\n\n\n\n\n\nEnter Credentials\n\n\n\n\n\nYou are now connected to the Raspberry Pi, and you can control it.\n\n\n\nRemote Connection Successfull\n\n\n\n\n\nTo disconnect from the Raspberry Pi, simply close the VNC Viewer window."
  },
  {
    "objectID": "realvnc-windows-connect.html#conclusion",
    "href": "realvnc-windows-connect.html#conclusion",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "You have successfully established connection to the Pi, allowing you to access and control it with ease.\nFor more information and support, you can visit the RealVNC website.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "vscode-windows.html",
    "href": "vscode-windows.html",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your Windows computer. VS Code provides a powerful environment for coding and development across various programming languages.\n\n\n\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\n\n\n\n\n\n\nVisit the official VS Code download page at https://code.visualstudio.com/download.\n\n\n\nClick on the “Windows” download link to download the Visual Studio Code installer for Windows.\n\n\n\nDownload VS Code\n\n\n\n\n\n\nLocate the downloaded installer file (usually in your “Downloads” folder).\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n\n\nYou will see the VS Code Setup Wizard. Click the “Next” button to begin the installation.\n\n\n\n\nLicense Agreement\n\n\n\n\n\n\nSelect the installation location (the default is usually fine) and click “Next.”\n\n\n\n\nInstallation Location\n\n\n\nChoose additional tasks if desired (e.g., adding VS Code to the PATH). Then, click “Next.”\n\n\n\n\nAdditional Tasks\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few moments.\n\n\n\nInstall\n\n\n\n\n\nAfter the installation is complete, you can leave the “Launch Visual Studio Code” option checked and click “Finish.”\n\n\n\nLaunch VS Code\n\n\n\n\n\nUpon launching, you can customize Visual Studio Code by installing extensions, themes, and configuring settings to suit your development needs. (Optional)\n\n\n\nCustomize VS Code\n\n\n\n\n\nOn the sidebar click on the Extensions tab.\n\n\n\nExtensions tab\n\n\n\n\n\nIn the search bar type “Python” and hit Enter.\n\n\n\nSearch Python\n\n\n\n\n\nOn the right panel click on the install button to install the extension.\n\n\n\nInstall Python Extension\n\n\n\n\n\nFrom the top-right corner click on the three-bars and open a New File.\n\n\n\nOpen New File\n\n\n\n\n\nFrom the drop down menu, select “Jupyter Notebook” as the file type.\n\n\n\nOpen Jupyter Notebook\n\n\n\n\n\n\nCongratulations! You’ve successfully installed Visual Studio Code on your Windows computer. VS Code is now ready for you to use as a powerful code editor for various programming languages.\nFeel free to explore the extensions marketplace and customize VS Code to enhance your coding experience. Happy coding!\nFor more information and documentation on Visual Studio Code, visit https://code.visualstudio.com/docs.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "vscode-windows.html#introduction",
    "href": "vscode-windows.html#introduction",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your Windows computer. VS Code provides a powerful environment for coding and development across various programming languages."
  },
  {
    "objectID": "vscode-windows.html#prerequisites",
    "href": "vscode-windows.html#prerequisites",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection."
  },
  {
    "objectID": "vscode-windows.html#installation-steps",
    "href": "vscode-windows.html#installation-steps",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "",
    "text": "Visit the official VS Code download page at https://code.visualstudio.com/download.\n\n\n\nClick on the “Windows” download link to download the Visual Studio Code installer for Windows.\n\n\n\nDownload VS Code\n\n\n\n\n\n\nLocate the downloaded installer file (usually in your “Downloads” folder).\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n\n\nYou will see the VS Code Setup Wizard. Click the “Next” button to begin the installation.\n\n\n\n\nLicense Agreement\n\n\n\n\n\n\nSelect the installation location (the default is usually fine) and click “Next.”\n\n\n\n\nInstallation Location\n\n\n\nChoose additional tasks if desired (e.g., adding VS Code to the PATH). Then, click “Next.”\n\n\n\n\nAdditional Tasks\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few moments.\n\n\n\nInstall\n\n\n\n\n\nAfter the installation is complete, you can leave the “Launch Visual Studio Code” option checked and click “Finish.”\n\n\n\nLaunch VS Code\n\n\n\n\n\nUpon launching, you can customize Visual Studio Code by installing extensions, themes, and configuring settings to suit your development needs. (Optional)\n\n\n\nCustomize VS Code\n\n\n\n\n\nOn the sidebar click on the Extensions tab.\n\n\n\nExtensions tab\n\n\n\n\n\nIn the search bar type “Python” and hit Enter.\n\n\n\nSearch Python\n\n\n\n\n\nOn the right panel click on the install button to install the extension.\n\n\n\nInstall Python Extension\n\n\n\n\n\nFrom the top-right corner click on the three-bars and open a New File.\n\n\n\nOpen New File\n\n\n\n\n\nFrom the drop down menu, select “Jupyter Notebook” as the file type.\n\n\n\nOpen Jupyter Notebook"
  },
  {
    "objectID": "vscode-windows.html#conclusion",
    "href": "vscode-windows.html#conclusion",
    "title": "Visual Studio Code Installation Guide for Windows",
    "section": "",
    "text": "Congratulations! You’ve successfully installed Visual Studio Code on your Windows computer. VS Code is now ready for you to use as a powerful code editor for various programming languages.\nFeel free to explore the extensions marketplace and customize VS Code to enhance your coding experience. Happy coding!\nFor more information and documentation on Visual Studio Code, visit https://code.visualstudio.com/docs.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "summary-policy.html",
    "href": "summary-policy.html",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Your instruction will address HW-related questions for up to one-week after the due date.\nYou may study in groups, but you may not discuss HWs among yourselves.\nEach student is expected to work out the HW programs independently.\nUnder no circumstances may you look at another student’s HWs.\nYou are encouraged\n\nto discuss the class material on the course website and\npost your queries on slack for your instructors and peers to comment\n\nYou are not allowed to\n\ndiscuss HW problems nor give out hints to the HW problems or\nprovide hints or suggestions on slack or\ndiscuss projects, tests, exams and quizzes, unless explicitly assigned a group quiz or a group HW.\n\nNOTE: You will be given opportunities to work in groups\n\nuse chatGPT or other generate AI tools to complete your HWs, projects, tests, exams and quizzes unless explicity permitted by the instruction team\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAll violations will be treated as violations of the Code of Academic Integrity"
  },
  {
    "objectID": "summary-policy.html#class-policy-on-collaboration",
    "href": "summary-policy.html#class-policy-on-collaboration",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Your instruction will address HW-related questions for up to one-week after the due date.\nYou may study in groups, but you may not discuss HWs among yourselves.\nEach student is expected to work out the HW programs independently.\nUnder no circumstances may you look at another student’s HWs.\nYou are encouraged\n\nto discuss the class material on the course website and\npost your queries on slack for your instructors and peers to comment\n\nYou are not allowed to\n\ndiscuss HW problems nor give out hints to the HW problems or\nprovide hints or suggestions on slack or\ndiscuss projects, tests, exams and quizzes, unless explicitly assigned a group quiz or a group HW.\n\nNOTE: You will be given opportunities to work in groups\n\nuse chatGPT or other generate AI tools to complete your HWs, projects, tests, exams and quizzes unless explicity permitted by the instruction team\n\n\n\n\n\n\n\n\nImportant\n\n\n\nAll violations will be treated as violations of the Code of Academic Integrity"
  },
  {
    "objectID": "summary-policy.html#justice-equity-diversity-inclusion-jedi",
    "href": "summary-policy.html#justice-equity-diversity-inclusion-jedi",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "Justice, Equity, Diversity, Inclusion (JEDI)",
    "text": "Justice, Equity, Diversity, Inclusion (JEDI)\n\nIt is our intention that this course serve the needs of all students who have the prerequisites.\nWe believe that the diversity of background and of perspective among the students and the instructional team is an asset.\nWe will strive to present material that is respectful of the diverse backgrounds and characteristics of the student body and the instructional team.\nEach of us, whether student or instructional team member, is expected to treat all others with respect. Disrespect in any form will not be tolerated.\nPlease contact Bulusu with any concerns or suggestions."
  },
  {
    "objectID": "summary-policy.html#university-policies",
    "href": "summary-policy.html#university-policies",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "University Policies",
    "text": "University Policies\nSee Course policies section on the course website more information\n\nCourse materials are only for the use of CS1010 Fall 2023.\n\nSubject to disciplinary action if you share any of this material\n\nIf you wish to avail of a religious holiday, you need to tell me in the first week of class.\nDisability Support Services (DSS) 202-994-8250\n\nAny student who may need an accommodation based on the potential impact of a disability should contact Disability Support Services to establish eligibility and to coordinate reasonable accommodations. disabilitysupport.gwu.edu\n\nFor other policies, including academic integrity, counselling, virtual academic support, safety and security, see University Policies under the course policies-section on the course webpage.\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "realvnc-mac.html",
    "href": "realvnc-mac.html",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "RealVNC is a remote desktop software that allows you to access your computer from anywhere. Follow the steps below to install RealVNC on your macOS.\n\n\nBefore you begin, ensure that you have administrative privileges on your Mac.\n\n\n\n\n\nVisit the RealVNC Viewer download page at https://www.realvnc.com/en/connect/download/combined/ and click on the “Download for macOS” button to download the installer.\n\n\n\nDownlaod RealVNC\n\n\n\n\n\nLocate the downloaded installer file (usually in your Downloads folder) and double-click on it to start the installation process and click on “Allow” when prompted.\n\n\n\nRun Installer\n\n\n\n\n\nAllow Installation\n\n\n\n\n\nThe installation wizard will guide you through the installation process. Click on “Customize installation” and “Deselect RealVNC Server” and hit “Install”.\n\n\n\nCustomize Installation\n\n\n\n\n\nDeselect RealVNC Server\n\n\n\n\n\nOnce the installation is complete, you can launch RealVNC Viewer by clicking on the “Launch” button or launch it from Launchpad. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC\n\n\n\n\n\nDon’t Sign up\n\n\n\n\n\n\nYou have successfully installed RealVNC Viewer on your Mac, allowing you to access and control remote computers with ease.\nFor more information and support, you can visit the RealVNC website.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "realvnc-mac.html#prerequisites",
    "href": "realvnc-mac.html#prerequisites",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "Before you begin, ensure that you have administrative privileges on your Mac."
  },
  {
    "objectID": "realvnc-mac.html#installation-steps",
    "href": "realvnc-mac.html#installation-steps",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "Visit the RealVNC Viewer download page at https://www.realvnc.com/en/connect/download/combined/ and click on the “Download for macOS” button to download the installer.\n\n\n\nDownlaod RealVNC\n\n\n\n\n\nLocate the downloaded installer file (usually in your Downloads folder) and double-click on it to start the installation process and click on “Allow” when prompted.\n\n\n\nRun Installer\n\n\n\n\n\nAllow Installation\n\n\n\n\n\nThe installation wizard will guide you through the installation process. Click on “Customize installation” and “Deselect RealVNC Server” and hit “Install”.\n\n\n\nCustomize Installation\n\n\n\n\n\nDeselect RealVNC Server\n\n\n\n\n\nOnce the installation is complete, you can launch RealVNC Viewer by clicking on the “Launch” button or launch it from Launchpad. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC\n\n\n\n\n\nDon’t Sign up"
  },
  {
    "objectID": "realvnc-mac.html#conclusion",
    "href": "realvnc-mac.html#conclusion",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "You have successfully installed RealVNC Viewer on your Mac, allowing you to access and control remote computers with ease.\nFor more information and support, you can visit the RealVNC website.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "download/Week5/Demo4-Guide.html",
    "href": "download/Week5/Demo4-Guide.html",
    "title": "CS 1010",
    "section": "",
    "text": "Prof. Kartik Bulusu [CS & MAE]\n\n\n\nOscar Southwell\n\n\n\nSameen Ahmad, Talia Novack\n\n\n\nManue Alaimo, Selman Eris, Saif Alzaabi, Gustavo Londono, Amy Longua, Pravin Khanal\n\n\n\nRutvik Solanki\nIf you have any questions regarding Python, please feel free to send a slack message or email to a member of the teaching team or come to office hours! We are happy to help!!\nLet’s start by importing our favorite friends as always going forward in this class: numpy, matplotlib, and pandas\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport pandas as pd\n\n\n\n\nWe can use csv files and pandas to pull in data (see demo 3), but let’s create our own numpy array for plotting this time\n\n\nnp.linspace() is a great tool to use during plotting! Provide the start, stop and number of points in the range and it will give you an evenly distributed number of elements in a numpy array\nExample:\nx = np.linspace(10, 20, 1001) will give an array containing 1001 elements evenly spaced from 10 to 20\n\nx = np.linspace(0, 10, 101)\nprint(x)\n\n[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.   1.1  1.2  1.3\n  1.4  1.5  1.6  1.7  1.8  1.9  2.   2.1  2.2  2.3  2.4  2.5  2.6  2.7\n  2.8  2.9  3.   3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9  4.   4.1\n  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.   5.1  5.2  5.3  5.4  5.5\n  5.6  5.7  5.8  5.9  6.   6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9\n  7.   7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9  8.   8.1  8.2  8.3\n  8.4  8.5  8.6  8.7  8.8  8.9  9.   9.1  9.2  9.3  9.4  9.5  9.6  9.7\n  9.8  9.9 10. ]\n\n\n\n#Using array math from Demo 2, we can create some arrays named y1, y2, and y3 as a function of x\ny1 = 2*x\ny2 = x**2\ny3 = 3*x**3\n\n\n\n\nA figure is just a place for our plots to exist. A figure can have multiple subplots which are arranged like a matrix in rows and columns. Each subplot is called an axis. Let’s play around with the subplots feature a little bit\nTo create a set of axes, use the function:\nfig, axs = plt.subplots(num_of_rows, number_of_columns, figsize=(width, height))\nLet’s break this down a little at a time.\n\nfig, axs = plt.subplots(1, 2, figsize=(6,4))\n#this figure has 1 row of 2 plots, and the overall size of the figure is 6 units wide, 4 units tall\n\n\n\n\n\nfig, axs = plt.subplots(2,3, figsize=(12,4))\n#this workspace has 2 rows of 3 plots each, the overall size of the figure is 12 units wide, 4 units tall\n\n\n\n\n\n\nWe can use the exact same thing!! The only thing that is typical to change (but not necessary) is from axs to ax to show it is singular\nfig, ax = plt.subplots(1, 1, figsize=(width, height))\nIf we really want to short-hand it, plt.subplots(figsize=(width, height)) works just the same. It assumes a 1x1 by default!\n\nfig, ax = plt.subplots(figsize=(4,6))\n#shows a figure with only one subplot and the overall size is 4 units wide by 6 units tall\n\n\n\n\n\n\n\n\n\n\n\nCase 1. 1x1 subplot\nCase 2. 1xn subplots or mx1 subplots (where m and n are not equal to 1)\nCase 3. mxn subplots (where m and n are not equal to 1)\n\n\n\n\nWhen we have a 1x1 Subplot, we just use ax.plot(x,y) similar to plt.plot(x,y) from demo 2.\n\n\n\nWhen we have only one row or only one column of plots, we use axs[ax_num].plot(x,y) where ax_num goes from 0 to the number specified -1\nFor example, to plot on the third plot in a single row use axs[2].plot(x,y)\nAnother example, to plot on the first element in a single column uses axs[0].plot(x,y)\n\n\n\nIn order to plot when we have a bunch of different places to do so, we need to tell the computer which spot to plot.\nTo access an axis (subplot), use its location. This is very similar to pandas when we used df.loc['row', 'column']\nFor example, to plot on the top left axis, we use axs[0,0].plot(x,y)\n\n#Example of case 1. for a 1x1 subplot\nfig, ax = plt.subplots(figsize=(4,6))\nax.plot(x,y1)\nax.plot(x,y2)\nax.plot(x,y3);\n\n\n\n\n\n#Example of case 2. for a 1xn subplot\nfig, axs = plt.subplots(1, 2, figsize=(8,4))\n\n#plot on the left plot\naxs[0].plot(x,y1)\n#plot again on the left\naxs[0].plot(x,y2)\n\n#plot on the right plot\naxs[1].plot(x,y3);\n\n\n\n\n\n#Example of case 2. for a mx1 subplot\nfig, axs = plt.subplots(2, 1, figsize=(4,8))\n\n#plot on the top plot\naxs[0].plot(x,y1)\n#plot again on the top\naxs[0].plot(x,y2)\n\n#plot on the bottom plot\naxs[1].plot(x,y3);\n\n\n\n\n\n#Example of case 3. We will have a 2x2 plotting setup\nfig, axs = plt.subplots(2, 2, figsize=(8,8))\n\n#plot on the top left, row=0, column=0\naxs[0,0].plot(x,y1)\n\n#plot on the top right, row=0, column=1\naxs[0,1].plot(x,y2)\n\n#plot on the top left, row=1, column=0\naxs[1,0].plot(x,y3);\n#putting a ; at the end of our matplotlib figures gets rid of the sentence that is printed by default during plotting\n\n#we'll leave the bottom right blank, but it would have axs[1,1]\n\n\n\n\n\n#For your reference, the default pandas column and index names happen to correspond with the axis plotting\nx = np.array([[1, 2], [3, 4]])\ndisplay(pd.DataFrame(x))\n\n#in this example, the number 4 is in the location 1,1, and also in the lower right\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n1\n2\n\n\n1\n3\n4\n\n\n\n\n\n\n\n\n\n\n\n\nTo really get our creative energy flowing, we can make our plots look very nice!\nWe will cover all of the key information in one plot. Below is the plot we work with in class and then beyond that, in section v. is all of the in-depth descriptions of how each of these things work, if you’d like to know. To jump to section v. Use the built in Table of contents feature\nAll of the features shown in this example are for a 1x1 subplot using ax.FUNCTION, so similar to plotting above use axs[INDEX].FUNCTION to apply to a subplot specifically\nExample: to put a unique title on every suplot of a 2x2 figure\naxs[0,0].set_title('Title1')\naxs[0,1].set_title('Title2')\naxs[1,0].set_title('Title3')\naxs[1,1].set_title('Title4')\n\n#set up our single subplot!\nfig, ax = plt.subplots(figsize=(8,8))\n\n#let's establish t for 5 seconds, with 11 datapoints\nt = np.linspace(0, 5, 11)\n\n#now lets establish our y-axis values\nu1 = t\nu2 = t**2\nu3 = t**2 + 12\n\n# red dashes, blue dots and green triangles\nax.plot(t, u1, color='r', linestyle='--', label='u1')\nax.plot(t, u2, color='b', marker='s', label='Function u2')\nax.plot(t, u3, 'g^')\n\n#and lets get a little fancy an add some labeling\nax.set_xlabel('time (s)', fontsize=12)\nax.set_ylabel('Values as a function of time', fontsize=12)\n\n#and maybe a title for our plot\nax.set_title('A very fancy plot', fontsize=14)\n\n#ax.text(x, y) just puts a textbox at this coordinate\nax.text(1, 45, 'Look I can type in here too!!')\n\n#ax.axis([x1, x2, y1, y2]) limits the view we want to see\nax.axis([0, 5, 0, 60])\n\n#ax.grid() adds a grid to the plot\nax.grid()\n\n#ax.lengend() adds a legend (and finally a semi-colon to eliminate the default printing)\nax.legend();\n\n\n\n\n\n\n\nThere’s lots of matplotlib alternatives in python for plotting. Each has their pros and cons. You can read about some of them if you are interested: - Plotly (Plotly Express) - Seaborn - Altair - ggplot - geoplotlib - Gleam\n\n\n\nAs a group tackle the following question together!\nYou have two time-dependent signals that are measured in millivolts (mV):\n\\(u(t) = 1 + \\sin(2\\pi t)\\)\n\\(v(t) = 1 + \\cos(2\\pi t)\\)\n\nSet up an array for t from 0 to 5 seconds with 1001 datapoints\nSetup a 1x2 subplot space for plotting (two side by side axes). Pick a width and height that looks nice to you\nPlot signal u vs t on a subplot on the left, and v vs t on a subplot on the right\nGive each subplot axis labels (x and y axis)\nGive each subplot a title\nChange the color of u(t) to green and v(t) to red\n\n\n\n#step 1.\nt = np.linspace(YOUR_CONTENT)\n\nu = ARRAY_MATH_USING_t\nv = ARRAY_MATH_USING_t\n\n#step 2.\nfig, axs = plt.subplots(ROW, COLUMN, figsize=(WIDTH, HEIGHT))\n\n#step 3.\naxs[LEFT].plot(t,u)\naxs[RIGHT].plot(t,v)\n\n#step 4.\naxs[LEFT].set_xlabel(XLABEL)\naxs[LEFT].set_ylabel(YLABEL)\n\naxs[RIGHT].set_xlabel(XLABEL)\naxs[RIGHT].set_ylabel(YLABEL)\n\n#step 5.\naxs[LEFT].set_title(TITLE)\naxs[RIGHT].set_title(TITLE)\n\n#step 6.\n#revisit step 3 and make modifcations for color\n\n#Your code here!\n\n\n\n\n\nHere is a huge bank of information regarding matplotlib we will not cover in class, but available for you to play around with!\nThe best way to work with matplotlib is to try it out!\nIt should contain most things you would need. If it doesn’t, the answers are a Google away. We have also attached the documentation for matplotlib for you here\n\n\nThis section covers: - Scatter plots - Bar plots - Heatmaps\n\n\n\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\n\n#Default ax.plot shown in blue\nax.plot(x,y)\n\n#Scatter version shown in red\nax.scatter(x,y, color='red')\n\nax.grid();\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\nax.bar(x, y);\n\n\n\n\n\n#horizontal bar chart\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\nax.barh(x, y);\n\n\n\n\n\n\n\n\nmatrix = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],\n                   [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],\n                   [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],\n                   [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],\n                   [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],\n                   [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],\n                   [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])\n\n#converts matrix to a heat map with each position being colored according to number\nfig, ax = plt.subplots()\nim = ax.imshow(matrix)\n\n#adds a colorbar to the plot to represent what each color means\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.05)\nfig.colorbar(im, cax=cax);\n\n\n\n\n\n\n\n\nThis section covers a lot of different plotting effects in matplotlib - Title - Suptitle - Axis Labels - Fontsizes - Axis Ticksize - Legend - Grid - Line Thickness - Line Color - Line Style - Transparency - “alpha”\n\n\n\n#showcasing \"set\" features - title, xlabel, ylabel\n\nfig, axs = plt.subplots(2,2,figsize=(8,8), constrained_layout=True)\n# constrained_layout = True spaces the plots accordingly to fit the words\n\n#one option in one line\naxs[0,0].set(xlabel='Top Left X-axis', ylabel='Top Left Y-axis', title='Top Left')\naxs[0,1].set(xlabel='Top Right X-axis', ylabel='Top Right Y-axis', title='Top Right')\naxs[1,0].set(xlabel='Lower Left X-axis', ylabel='Lower Left Y-axis', title='Lower Left')\naxs[1,1].set(xlabel='Lower Right X-axis', ylabel='Lower Right Y-axis', title='Lower Right')\n\n#suptitle of a plot\nfig.suptitle('This is the Suptitle of the Plot');\n\n\n\n\n\n#showcasing individual set features - set_title, set_xlabel, set_ylabel\n\nfig, axs = plt.subplots(2,2,figsize=(8,8), constrained_layout=True)\n# constrained_layout = True spaces the plots accordingly to fit the words\n\n#bulkier but allows for fontsize manipulation\n#axs[0,0].set_xlabel('Top Left X-axis', fontsize=20)\n#axs[0,0].set_ylabel('Top Left Y-axis', fontsize=20)\n#axs[0,0].set_title('Top Left', fontsize=25)\n\n#repeat for all axs[x,y] slices or use axs.flat to loop through\nnaming_list = ['Top Left', 'Top Right', 'Lower Left', 'Lower Right']\nfor num, ax in enumerate(axs.flat):\n    ax.set_xlabel(naming_list[num]+' x-label', fontsize=18)\n    ax.set_ylabel(naming_list[num]+' y-label', fontsize=18)\n    ax.set_title(naming_list[num]+' Title', fontsize=20)\n\nfig.suptitle('This is the Suptitle of the Plot', fontsize=30);\n\n\n\n\n\n#sharing axis labels\nnaming_list = ['Top Left', 'Top Right', 'Lower Left', 'Lower Right']\n\n#notice x-labels for the top two plots are missing\nfig, axs = plt.subplots(2, 2, figsize=(8,8), constrained_layout=True)\nfor num, ax in enumerate(axs.flat):\n    ax.set_xlabel(naming_list[num]+' x-label', fontsize=18)\n    ax.set_ylabel(naming_list[num]+' y-label', fontsize=18)\n    ax.set_title(naming_list[num]+' Title', fontsize=20)\n    ax.label_outer()\n\n\n\n\n\n\n\n\n#axis ticks - changed globally\nimport matplotlib as mpl\n#15 is huge, but it will nicely demonstrate what is happening\nmpl.rc('xtick', labelsize=15)\nmpl.rc('ytick', labelsize=15)\n\n\nfig, axs = plt.subplots(2,2,figsize=(8,8), constrained_layout=True)\n#one option in one line\naxs[0,0].set(xlabel='Top Left X-axis', ylabel='Top Left Y-axis', title='Top Left')\naxs[0,1].set(xlabel='Top Right X-axis', ylabel='Top Right Y-axis', title='Top Right')\naxs[1,0].set(xlabel='Lower Left X-axis', ylabel='Lower Left Y-axis', title='Lower Left')\naxs[1,1].set(xlabel='Lower Right X-axis', ylabel='Lower Right Y-axis', title='Lower Right')\n\n#suptitle of a plot\nfig.suptitle('This is the Suptitle of the Plot');\n\n\n\n\n\n#reset it to something more reasonable\nmpl.rc('xtick', labelsize=10)\nmpl.rc('ytick', labelsize=10)\n\n\n\n\nThe legend of the plot is also sometimes referred to as the key of the plot. It is where lines are labeled\nThe grid just shows us the x-y points every so often as faint lines in the background\nLegend parameters found here\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\ny_list = [y1, y2, y3, y4]\nname_list = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\n#in general: ax.plot(x,y, label='Label')\n\n#make the legend of the plot (also sometimes called the key)\nax.legend()\n\n#legend has fontsize, location, and even title features (shown in next plot)\n\n#add gridlines to the plot\nax.grid()\n\n\n\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\nylist = [y1, y2, y3, y4]\nname_list = ['1st', '2nd', '3rd', '4th']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\n#in general: ax.plot(x,y, label='Label')\n\n#this combination will not look good, but its about showcasing the features\nax.legend(title = 'Polynomial Degree', title_fontsize=15, fontsize=10, loc='lower left')\n\n\n#add gridlines to the plot\nax.grid()\n\n\n\n\n\n\n\nList of colors\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\nax.plot(x,y1, color='r') #red color (short-hand)\n\nax.plot(x,y2, color='#033C5A') #color is GW Blue (in hex code)\n\nax.plot(x,y3, color='darksalmon',linestyle='dashed')\n#darksalmon is a default named color from matplotlib\n\nax.plot(x,y4, linewidth=8, alpha=0.3);\n#alpha varies from 0.0 to 1.0 and determines transparency\n\n\n\n\n\n\n\n\nThis section covers: - Log scale plots - Axis Limits - Annotation - Arrows - Thicker gridlines - Shading of shapes - In-line labels - Category labels (such as all dashed lines mean something)\n\n\nSometimes plots are best represented with a Logarithmically-Scaled y-axis or logarithmically scaled x and y axes\n\nfig, axs = plt.subplots(1, 2)\nx = np.array([1, 2, 3, 4, 5])\ny = 10**x\n\naxs[0].plot(x,y)\naxs[0].set_title('Normal Scaling')\n\naxs[1].set_yscale('log')\naxs[1].plot(x,y)\naxs[1].set_title('Logarithmic Scaling');\n\n\n\n\n\n\n\nYou can limit the view of the window by adjusting the axes\n\nfig, ax = plt.subplots()\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\n\nax.plot(x,y)\n\nax.set_xlim(left=1, right=5)\nax.set_ylim(top=6, bottom=0);\n\n\n\n\n\n\n\nLabeling points is super useful for some plots\nDocumentation\n\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\n\n#Default plt.plot shown in blue\nax.plot(x,y)\n\n#Scatter version shown in red\nax.scatter(x,y, color='red')\n\npointName = ['Name1', 'Name2', 'Name3', 'Name4', 'Name5']\nfor num in range(len(x)):\n    ax.annotate(text=pointName[num], xy=(x[num],y[num]));\n\n#xy could be adjusted per point to move the values to better locations\n\n\n\n\n\n\n\nPlotting arrows can show cycles more easily or all sorts of other fun applications\nDraw an arrow from (x, y) to (x+dx, y+dy).\nDocumentation\n\nfig, ax = plt.subplots()\n\nx = 5\ny = 0\ndx = 2\ndy = 4\n\nax.arrow(x,y,dx,dy, head_width=0.2, head_length=0.5, length_includes_head=True);\n\n#if given (x1, y1) and (x2, y2):\nx1 = 5\nx2 = 7\ny1 = 0\ny2 = 4\n\ndx = x2-x1\ndy = y2-y1\n\n\n\n\n\n\n\nYou can adjust all gridlines with this feature:\nax.xaxis.get_gridlines() & ax.yaxis.get_gridlines()\nOr\nThis you want to bold the singlular lines through 0 for example, or draw a horizontal line at a y value (or vertical line at an x value), this is what you would use:\nDocumentation:\n\nHorizontal Line\nVertical Line\n\n\nfig, ax = plt.subplots()\n\nax.grid()\n\n#color all x-grids red\nxgrids = ax.xaxis.get_gridlines()\nfor num in range(len(xgrids)):\n    xgrids[num].set_color('r')\n    xgrids[num].set_linewidth(2.5)\n\n#change one x-grid to green to show off indexing\n#index from 0 (starting on the left of the plot)\nxgrids[3].set_color('g')\nxgrids[3].set_linewidth(5)\n\n#color all y-grids blue\nygrids = ax.yaxis.get_gridlines()\nfor num in range(len(ygrids)):\n    ygrids[num].set_color('b')\n    ygrids[num].set_linewidth(3)\n\n#change one y-grid to yellow to show off indexing\n#index from 0 (starting on the bottom on the plot)\nygrids[3].set_color('y')\nygrids[3].set_linewidth(5)\n\n\n\n\n\nfig, ax = plt.subplots()\n\nax.grid()\n\nax.axhline(y=0, color='k', linewidth=2)\nax.axvline(x=0, color='k', linewidth=4)\n\nax.axhline(y=2.15, color='b', linewidth=3);\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots();\n\n#has 4 items since its a square\nx_square = [0, 1, 1, 0]\ny_square = [0, 0, 1, 1]\n\n#has 3 items since its a triangle\nx_triangle = [2, 3, 4]\ny_triangle = [2, 6, 4]\n\nax.fill(x_square, y_square)\nax.fill(x_triangle, y_triangle, color='r', alpha=0.4);\n\n\n\n\n\n\n\nSomeone came up with this awesome system for in-line labeling that I use frequently. The link to the original is provided here if you want to read about it from the source\n\ndef label_line(line,x,label=None,align=True,**kwargs):\n\n    ax = line.axes\n    xdata = line.get_xdata()\n    ydata = line.get_ydata()\n\n    if (x &lt; xdata[0]) or (x &gt; xdata[-1]):\n        print('x label location is outside data range!')\n        return\n\n    #Find corresponding y co-ordinate and angle of the line\n    ip = 1\n    for i in range(len(xdata)):\n        if x &lt; xdata[i]:\n            ip = i\n            break\n\n    y = ydata[ip-1] + (ydata[ip]-ydata[ip-1])*(x-xdata[ip-1])/(xdata[ip]-xdata[ip-1])\n\n    if not label:\n        label = line.get_label()\n\n    if align:\n        #Compute the slope\n        dx = xdata[ip] - xdata[ip-1]\n        dy = ydata[ip] - ydata[ip-1]\n        ang = np.degrees(np.arctan2(dy,dx))\n\n        #Transform to screen co-ordinates\n        pt = np.array([x,y]).reshape((1,2))\n        trans_angle = ax.transData.transform_angles(np.array((ang,)),pt)[0]\n\n    else:\n        trans_angle = 0\n\n    #Set a bunch of keyword arguments\n    if 'color' not in kwargs:\n        kwargs['color'] = line.get_color()\n\n    if ('horizontalalignment' not in kwargs) and ('ha' not in kwargs):\n        kwargs['ha'] = 'center'\n\n    if ('verticalalignment' not in kwargs) and ('va' not in kwargs):\n        kwargs['va'] = 'center'\n\n    if 'backgroundcolor' not in kwargs:\n        kwargs['backgroundcolor'] = ax.get_facecolor()\n\n    if 'clip_on' not in kwargs:\n        kwargs['clip_on'] = True\n\n    if 'zorder' not in kwargs:\n        kwargs['zorder'] = 2.5\n\n    ax.text(x,y,label,rotation=trans_angle,**kwargs)\n\n\ndef label_lines(lines,align=True,xvals=None,**kwargs):\n\n    ax = lines[0].axes\n    labLines = []\n    labels = []\n\n    #Take only the lines which have labels other than the default ones\n    for line in lines:\n        label = line.get_label()\n        if \"_line\" not in label:\n            labLines.append(line)\n            labels.append(label)\n\n    if xvals is None:\n        xmin,xmax = ax.get_xlim()\n        xvals = np.linspace(xmin,xmax,len(labLines)+2)[1:-1]\n\n    for line,x,label in zip(labLines,xvals,labels):\n        label_line(line,x,label,align,**kwargs)\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\ny_list = [y1, y2, y3, y4]\nname_list = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\nax.grid()\n\n#maybe not the best showcase of the possibilities, but a good tool nonetheless\nlabel_lines(plt.gca().get_lines(),align=False,fontsize=10)\n\n\n\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\ny_list = [y1, y2, y3, y4]\nname_list = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\nax.grid()\n\n#maybe not the best showcase of the possibilities, but a good tool nonetheless\nlabel_lines(plt.gca().get_lines(),zorder=2.5, color='grey')\n\n\n\n\n\n\n\nWhat if we want to say all dashed lines mean something? What if we want to put something in the legend we don’t want to see?\nWe can do that with “Category Labeling”\n\nfig, ax = plt.subplots(figsize=(10,8))\nx = np.linspace(0, 5, 50)\ny1 = np.sqrt(x)\ny1b = np.sqrt(x)+ 30\ny2 = x**2\ny3 = x**(1/3)\ny4 = x**3\ny4b = x**3 + 20\n\nax.plot(x, y1, linestyle='--', color='r')\nax.plot(x, y1b, linestyle='--', color='r')\nax.plot(x,y2, color='g')\nax.plot(x, y3, linestyle='--', color='b')\nax.plot(x,y4, color = 'y')\nax.plot(x,y4b, color='y')\n\n#we can use a fancy trick to plot a single point (which won't show up on the plot)\nax.plot([0],[0], color = 'r', label='Square root function')\nax.plot([0],[0], color = 'g', label='Square function')\nax.plot([0],[0], color = 'b', label='Cube root function')\nax.plot([0],[0], color = 'y', label='Cubic function')\nax.plot([0],[0], color = 'grey', linestyle = '--', label='Root function')\nax.plot([0],[0], color = 'grey', label='Power function')\n\nplt.legend(title='Showcase Category Labels:', title_fontsize=16, fontsize=12);\n\n\n\n\n\n\n\n\nTired of always looking up the GW colors for figures, I sure am. Here’s a faster way!\nOrder matters, will always plot the first line without a color label as the first color in the given list, then the 2nd as the 2nd color, etc\nIf it gets to the end of the list, it will begin from the beginning with the 1st color hence “Cycler”\n\nfrom cycler import cycler\n\nimport matplotlib as mpl\n\n#save this default for later when we need it\nprop_cycle = mpl.rcParams['axes.prop_cycle']\n\n\n#Cycle 1:\n#in order: GW red, GW green, GW Yellow, GW Blue\ncolorlist1 = ['#C9102F', '#008364', '#FFC72C', '#033C5A']\nmpl.rcParams['axes.prop_cycle'] = cycler(color=colorlist1)\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\n\nylist = [y1, y2, y3, y4]\nnamelist = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\n\n#no color parameter specified, but matplotlib defaults to the sequence we told it to\nfor num, y in enumerate(ylist):\n    ax.plot(x,y, label=namelist[num])\n\nax.legend();\n\n\n\n\n\n#Cycle 2:\n#in order: GW blue, GW light blue, GW buff, GW dark green, GW Brown\ncolorlist2 = ['#033C5A', '#0073AA', '#AA9868', '#008364', '#A75523']\nmpl.rcParams['axes.prop_cycle'] = cycler(color=colorlist2)\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\ny5 = x**5\n\nylist = [y1, y2, y3, y4, y5]\nnamelist = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree', '5th Degree']\n\n#no color parameter specified, but matplotlib defaults to the sequence we told it to\nfor num, y in enumerate(ylist):\n    ax.plot(x,y, label=namelist[num])\n\nax.legend();\n\n\n\n\n\n#here's the full GW color system (excluding black and white) in one list if you have a lot of lines to plot\nGW_COLOR_LIST = ['#C9102F', '#008364', '#FFC72C', '#033C5A', '#0073AA', '#AA9868', '#008364', '#A75523']\nmpl.rcParams['axes.prop_cycle'] = cycler(color=GW_COLOR_LIST)\n\n#but we will go back to defaults\nmpl.rcParams['axes.prop_cycle'] = prop_cycle\n\n\n\n\n\nfrom mpl_toolkits import mplot3d\n\n\n#basic 3D plot initialization\nfig = plt.figure(figsize=(6,5))\nax = plt.axes(projection='3d')\n\n\n\n\n\n\n\n#line plots\nfig = plt.figure(figsize=(6,5))\nax = plt.axes(projection='3d')\n\nx = np.linspace(0, 5, 50)\ny = np.sin(np.linspace(0, 10, 50))\nz = np.cos(x) * y\n\nax.plot3D(x, y, z);\n\n\n\n\n\n#scatter plot\nfig = plt.figure(figsize=(6,5))\nax = plt.axes(projection='3d')\n\nx = np.linspace(0, 10, 10)\ny = (x+67)**2\nz = np.cos(x)\n\nax.scatter3D(x,y,z);\n\n\n\n\n\n\n\nContour - Imagine making rings at differing elevations of a surface, then plot the rings\nWireframe - Gridded mesh of surface structures\nSurface - Solid surface plot\nEach style has benefits and downsides for representation of data, so I’ve included them all to make it easy to know the options\nExtra Notes:\nnp.meshgrid is commonly used in 3d plots. Meshgrid documentation\n\n#this function is commonly used in math classes because it looks fun\ndef f(x, y):\n    return (np.sin(np.sqrt(x**2 + y**2)))\n\n\n#contour plot example\nx = np.linspace(-8, 8, 50)\ny = np.linspace(-8, 8, 50)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(8,6))\nax = plt.axes(projection='3d')\n\n#4th parameter here indicates the number of elevation rings used\nax.contour3D(X, Y, Z, 30);\n\n\n\n\n\n#wireframe example\nx = np.linspace(-8, 8, 50)\ny = np.linspace(-8, 8, 50)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(8,6))\nax = plt.axes(projection='3d')\n\nax.plot_wireframe(X, Y, Z);\n\n\n\n\n\n#surface plot example\nx = np.linspace(-8, 8, 50)\ny = np.linspace(-8, 8, 50)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(8,6))\nax = plt.axes(projection='3d')\n\nax.plot_surface(X, Y, Z);"
  },
  {
    "objectID": "download/Week5/Demo4-Guide.html#getting-started-with-matplotlib",
    "href": "download/Week5/Demo4-Guide.html#getting-started-with-matplotlib",
    "title": "CS 1010",
    "section": "",
    "text": "We can use csv files and pandas to pull in data (see demo 3), but let’s create our own numpy array for plotting this time\n\n\nnp.linspace() is a great tool to use during plotting! Provide the start, stop and number of points in the range and it will give you an evenly distributed number of elements in a numpy array\nExample:\nx = np.linspace(10, 20, 1001) will give an array containing 1001 elements evenly spaced from 10 to 20\n\nx = np.linspace(0, 10, 101)\nprint(x)\n\n[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9  1.   1.1  1.2  1.3\n  1.4  1.5  1.6  1.7  1.8  1.9  2.   2.1  2.2  2.3  2.4  2.5  2.6  2.7\n  2.8  2.9  3.   3.1  3.2  3.3  3.4  3.5  3.6  3.7  3.8  3.9  4.   4.1\n  4.2  4.3  4.4  4.5  4.6  4.7  4.8  4.9  5.   5.1  5.2  5.3  5.4  5.5\n  5.6  5.7  5.8  5.9  6.   6.1  6.2  6.3  6.4  6.5  6.6  6.7  6.8  6.9\n  7.   7.1  7.2  7.3  7.4  7.5  7.6  7.7  7.8  7.9  8.   8.1  8.2  8.3\n  8.4  8.5  8.6  8.7  8.8  8.9  9.   9.1  9.2  9.3  9.4  9.5  9.6  9.7\n  9.8  9.9 10. ]\n\n\n\n#Using array math from Demo 2, we can create some arrays named y1, y2, and y3 as a function of x\ny1 = 2*x\ny2 = x**2\ny3 = 3*x**3\n\n\n\n\nA figure is just a place for our plots to exist. A figure can have multiple subplots which are arranged like a matrix in rows and columns. Each subplot is called an axis. Let’s play around with the subplots feature a little bit\nTo create a set of axes, use the function:\nfig, axs = plt.subplots(num_of_rows, number_of_columns, figsize=(width, height))\nLet’s break this down a little at a time.\n\nfig, axs = plt.subplots(1, 2, figsize=(6,4))\n#this figure has 1 row of 2 plots, and the overall size of the figure is 6 units wide, 4 units tall\n\n\n\n\n\nfig, axs = plt.subplots(2,3, figsize=(12,4))\n#this workspace has 2 rows of 3 plots each, the overall size of the figure is 12 units wide, 4 units tall\n\n\n\n\n\n\nWe can use the exact same thing!! The only thing that is typical to change (but not necessary) is from axs to ax to show it is singular\nfig, ax = plt.subplots(1, 1, figsize=(width, height))\nIf we really want to short-hand it, plt.subplots(figsize=(width, height)) works just the same. It assumes a 1x1 by default!\n\nfig, ax = plt.subplots(figsize=(4,6))\n#shows a figure with only one subplot and the overall size is 4 units wide by 6 units tall\n\n\n\n\n\n\n\n\n\n\n\nCase 1. 1x1 subplot\nCase 2. 1xn subplots or mx1 subplots (where m and n are not equal to 1)\nCase 3. mxn subplots (where m and n are not equal to 1)\n\n\n\n\nWhen we have a 1x1 Subplot, we just use ax.plot(x,y) similar to plt.plot(x,y) from demo 2.\n\n\n\nWhen we have only one row or only one column of plots, we use axs[ax_num].plot(x,y) where ax_num goes from 0 to the number specified -1\nFor example, to plot on the third plot in a single row use axs[2].plot(x,y)\nAnother example, to plot on the first element in a single column uses axs[0].plot(x,y)\n\n\n\nIn order to plot when we have a bunch of different places to do so, we need to tell the computer which spot to plot.\nTo access an axis (subplot), use its location. This is very similar to pandas when we used df.loc['row', 'column']\nFor example, to plot on the top left axis, we use axs[0,0].plot(x,y)\n\n#Example of case 1. for a 1x1 subplot\nfig, ax = plt.subplots(figsize=(4,6))\nax.plot(x,y1)\nax.plot(x,y2)\nax.plot(x,y3);\n\n\n\n\n\n#Example of case 2. for a 1xn subplot\nfig, axs = plt.subplots(1, 2, figsize=(8,4))\n\n#plot on the left plot\naxs[0].plot(x,y1)\n#plot again on the left\naxs[0].plot(x,y2)\n\n#plot on the right plot\naxs[1].plot(x,y3);\n\n\n\n\n\n#Example of case 2. for a mx1 subplot\nfig, axs = plt.subplots(2, 1, figsize=(4,8))\n\n#plot on the top plot\naxs[0].plot(x,y1)\n#plot again on the top\naxs[0].plot(x,y2)\n\n#plot on the bottom plot\naxs[1].plot(x,y3);\n\n\n\n\n\n#Example of case 3. We will have a 2x2 plotting setup\nfig, axs = plt.subplots(2, 2, figsize=(8,8))\n\n#plot on the top left, row=0, column=0\naxs[0,0].plot(x,y1)\n\n#plot on the top right, row=0, column=1\naxs[0,1].plot(x,y2)\n\n#plot on the top left, row=1, column=0\naxs[1,0].plot(x,y3);\n#putting a ; at the end of our matplotlib figures gets rid of the sentence that is printed by default during plotting\n\n#we'll leave the bottom right blank, but it would have axs[1,1]\n\n\n\n\n\n#For your reference, the default pandas column and index names happen to correspond with the axis plotting\nx = np.array([[1, 2], [3, 4]])\ndisplay(pd.DataFrame(x))\n\n#in this example, the number 4 is in the location 1,1, and also in the lower right\n\n\n\n\n\n\n\n\n0\n1\n\n\n\n\n0\n1\n2\n\n\n1\n3\n4"
  },
  {
    "objectID": "download/Week5/Demo4-Guide.html#getting-fancy-with-plotting",
    "href": "download/Week5/Demo4-Guide.html#getting-fancy-with-plotting",
    "title": "CS 1010",
    "section": "",
    "text": "To really get our creative energy flowing, we can make our plots look very nice!\nWe will cover all of the key information in one plot. Below is the plot we work with in class and then beyond that, in section v. is all of the in-depth descriptions of how each of these things work, if you’d like to know. To jump to section v. Use the built in Table of contents feature\nAll of the features shown in this example are for a 1x1 subplot using ax.FUNCTION, so similar to plotting above use axs[INDEX].FUNCTION to apply to a subplot specifically\nExample: to put a unique title on every suplot of a 2x2 figure\naxs[0,0].set_title('Title1')\naxs[0,1].set_title('Title2')\naxs[1,0].set_title('Title3')\naxs[1,1].set_title('Title4')\n\n#set up our single subplot!\nfig, ax = plt.subplots(figsize=(8,8))\n\n#let's establish t for 5 seconds, with 11 datapoints\nt = np.linspace(0, 5, 11)\n\n#now lets establish our y-axis values\nu1 = t\nu2 = t**2\nu3 = t**2 + 12\n\n# red dashes, blue dots and green triangles\nax.plot(t, u1, color='r', linestyle='--', label='u1')\nax.plot(t, u2, color='b', marker='s', label='Function u2')\nax.plot(t, u3, 'g^')\n\n#and lets get a little fancy an add some labeling\nax.set_xlabel('time (s)', fontsize=12)\nax.set_ylabel('Values as a function of time', fontsize=12)\n\n#and maybe a title for our plot\nax.set_title('A very fancy plot', fontsize=14)\n\n#ax.text(x, y) just puts a textbox at this coordinate\nax.text(1, 45, 'Look I can type in here too!!')\n\n#ax.axis([x1, x2, y1, y2]) limits the view we want to see\nax.axis([0, 5, 0, 60])\n\n#ax.grid() adds a grid to the plot\nax.grid()\n\n#ax.lengend() adds a legend (and finally a semi-colon to eliminate the default printing)\nax.legend();"
  },
  {
    "objectID": "download/Week5/Demo4-Guide.html#alternatives-to-matplotlib",
    "href": "download/Week5/Demo4-Guide.html#alternatives-to-matplotlib",
    "title": "CS 1010",
    "section": "",
    "text": "There’s lots of matplotlib alternatives in python for plotting. Each has their pros and cons. You can read about some of them if you are interested: - Plotly (Plotly Express) - Seaborn - Altair - ggplot - geoplotlib - Gleam"
  },
  {
    "objectID": "download/Week5/Demo4-Guide.html#challenge-question",
    "href": "download/Week5/Demo4-Guide.html#challenge-question",
    "title": "CS 1010",
    "section": "",
    "text": "As a group tackle the following question together!\nYou have two time-dependent signals that are measured in millivolts (mV):\n\\(u(t) = 1 + \\sin(2\\pi t)\\)\n\\(v(t) = 1 + \\cos(2\\pi t)\\)\n\nSet up an array for t from 0 to 5 seconds with 1001 datapoints\nSetup a 1x2 subplot space for plotting (two side by side axes). Pick a width and height that looks nice to you\nPlot signal u vs t on a subplot on the left, and v vs t on a subplot on the right\nGive each subplot axis labels (x and y axis)\nGive each subplot a title\nChange the color of u(t) to green and v(t) to red\n\n\n\n#step 1.\nt = np.linspace(YOUR_CONTENT)\n\nu = ARRAY_MATH_USING_t\nv = ARRAY_MATH_USING_t\n\n#step 2.\nfig, axs = plt.subplots(ROW, COLUMN, figsize=(WIDTH, HEIGHT))\n\n#step 3.\naxs[LEFT].plot(t,u)\naxs[RIGHT].plot(t,v)\n\n#step 4.\naxs[LEFT].set_xlabel(XLABEL)\naxs[LEFT].set_ylabel(YLABEL)\n\naxs[RIGHT].set_xlabel(XLABEL)\naxs[RIGHT].set_ylabel(YLABEL)\n\n#step 5.\naxs[LEFT].set_title(TITLE)\naxs[RIGHT].set_title(TITLE)\n\n#step 6.\n#revisit step 3 and make modifcations for color\n\n#Your code here!"
  },
  {
    "objectID": "download/Week5/Demo4-Guide.html#in-depth-matplotlib-resources-bonus---not-required",
    "href": "download/Week5/Demo4-Guide.html#in-depth-matplotlib-resources-bonus---not-required",
    "title": "CS 1010",
    "section": "",
    "text": "Here is a huge bank of information regarding matplotlib we will not cover in class, but available for you to play around with!\nThe best way to work with matplotlib is to try it out!\nIt should contain most things you would need. If it doesn’t, the answers are a Google away. We have also attached the documentation for matplotlib for you here\n\n\nThis section covers: - Scatter plots - Bar plots - Heatmaps\n\n\n\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\n\n#Default ax.plot shown in blue\nax.plot(x,y)\n\n#Scatter version shown in red\nax.scatter(x,y, color='red')\n\nax.grid();\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\nax.bar(x, y);\n\n\n\n\n\n#horizontal bar chart\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\nax.barh(x, y);\n\n\n\n\n\n\n\n\nmatrix = np.array([[0.8, 2.4, 2.5, 3.9, 0.0, 4.0, 0.0],\n                   [2.4, 0.0, 4.0, 1.0, 2.7, 0.0, 0.0],\n                   [1.1, 2.4, 0.8, 4.3, 1.9, 4.4, 0.0],\n                   [0.6, 0.0, 0.3, 0.0, 3.1, 0.0, 0.0],\n                   [0.7, 1.7, 0.6, 2.6, 2.2, 6.2, 0.0],\n                   [1.3, 1.2, 0.0, 0.0, 0.0, 3.2, 5.1],\n                   [0.1, 2.0, 0.0, 1.4, 0.0, 1.9, 6.3]])\n\n#converts matrix to a heat map with each position being colored according to number\nfig, ax = plt.subplots()\nim = ax.imshow(matrix)\n\n#adds a colorbar to the plot to represent what each color means\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\ndivider = make_axes_locatable(ax)\ncax = divider.append_axes(\"right\", size=\"5%\", pad=0.05)\nfig.colorbar(im, cax=cax);\n\n\n\n\n\n\n\n\nThis section covers a lot of different plotting effects in matplotlib - Title - Suptitle - Axis Labels - Fontsizes - Axis Ticksize - Legend - Grid - Line Thickness - Line Color - Line Style - Transparency - “alpha”\n\n\n\n#showcasing \"set\" features - title, xlabel, ylabel\n\nfig, axs = plt.subplots(2,2,figsize=(8,8), constrained_layout=True)\n# constrained_layout = True spaces the plots accordingly to fit the words\n\n#one option in one line\naxs[0,0].set(xlabel='Top Left X-axis', ylabel='Top Left Y-axis', title='Top Left')\naxs[0,1].set(xlabel='Top Right X-axis', ylabel='Top Right Y-axis', title='Top Right')\naxs[1,0].set(xlabel='Lower Left X-axis', ylabel='Lower Left Y-axis', title='Lower Left')\naxs[1,1].set(xlabel='Lower Right X-axis', ylabel='Lower Right Y-axis', title='Lower Right')\n\n#suptitle of a plot\nfig.suptitle('This is the Suptitle of the Plot');\n\n\n\n\n\n#showcasing individual set features - set_title, set_xlabel, set_ylabel\n\nfig, axs = plt.subplots(2,2,figsize=(8,8), constrained_layout=True)\n# constrained_layout = True spaces the plots accordingly to fit the words\n\n#bulkier but allows for fontsize manipulation\n#axs[0,0].set_xlabel('Top Left X-axis', fontsize=20)\n#axs[0,0].set_ylabel('Top Left Y-axis', fontsize=20)\n#axs[0,0].set_title('Top Left', fontsize=25)\n\n#repeat for all axs[x,y] slices or use axs.flat to loop through\nnaming_list = ['Top Left', 'Top Right', 'Lower Left', 'Lower Right']\nfor num, ax in enumerate(axs.flat):\n    ax.set_xlabel(naming_list[num]+' x-label', fontsize=18)\n    ax.set_ylabel(naming_list[num]+' y-label', fontsize=18)\n    ax.set_title(naming_list[num]+' Title', fontsize=20)\n\nfig.suptitle('This is the Suptitle of the Plot', fontsize=30);\n\n\n\n\n\n#sharing axis labels\nnaming_list = ['Top Left', 'Top Right', 'Lower Left', 'Lower Right']\n\n#notice x-labels for the top two plots are missing\nfig, axs = plt.subplots(2, 2, figsize=(8,8), constrained_layout=True)\nfor num, ax in enumerate(axs.flat):\n    ax.set_xlabel(naming_list[num]+' x-label', fontsize=18)\n    ax.set_ylabel(naming_list[num]+' y-label', fontsize=18)\n    ax.set_title(naming_list[num]+' Title', fontsize=20)\n    ax.label_outer()\n\n\n\n\n\n\n\n\n#axis ticks - changed globally\nimport matplotlib as mpl\n#15 is huge, but it will nicely demonstrate what is happening\nmpl.rc('xtick', labelsize=15)\nmpl.rc('ytick', labelsize=15)\n\n\nfig, axs = plt.subplots(2,2,figsize=(8,8), constrained_layout=True)\n#one option in one line\naxs[0,0].set(xlabel='Top Left X-axis', ylabel='Top Left Y-axis', title='Top Left')\naxs[0,1].set(xlabel='Top Right X-axis', ylabel='Top Right Y-axis', title='Top Right')\naxs[1,0].set(xlabel='Lower Left X-axis', ylabel='Lower Left Y-axis', title='Lower Left')\naxs[1,1].set(xlabel='Lower Right X-axis', ylabel='Lower Right Y-axis', title='Lower Right')\n\n#suptitle of a plot\nfig.suptitle('This is the Suptitle of the Plot');\n\n\n\n\n\n#reset it to something more reasonable\nmpl.rc('xtick', labelsize=10)\nmpl.rc('ytick', labelsize=10)\n\n\n\n\nThe legend of the plot is also sometimes referred to as the key of the plot. It is where lines are labeled\nThe grid just shows us the x-y points every so often as faint lines in the background\nLegend parameters found here\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\ny_list = [y1, y2, y3, y4]\nname_list = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\n#in general: ax.plot(x,y, label='Label')\n\n#make the legend of the plot (also sometimes called the key)\nax.legend()\n\n#legend has fontsize, location, and even title features (shown in next plot)\n\n#add gridlines to the plot\nax.grid()\n\n\n\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\nylist = [y1, y2, y3, y4]\nname_list = ['1st', '2nd', '3rd', '4th']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\n#in general: ax.plot(x,y, label='Label')\n\n#this combination will not look good, but its about showcasing the features\nax.legend(title = 'Polynomial Degree', title_fontsize=15, fontsize=10, loc='lower left')\n\n\n#add gridlines to the plot\nax.grid()\n\n\n\n\n\n\n\nList of colors\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\nax.plot(x,y1, color='r') #red color (short-hand)\n\nax.plot(x,y2, color='#033C5A') #color is GW Blue (in hex code)\n\nax.plot(x,y3, color='darksalmon',linestyle='dashed')\n#darksalmon is a default named color from matplotlib\n\nax.plot(x,y4, linewidth=8, alpha=0.3);\n#alpha varies from 0.0 to 1.0 and determines transparency\n\n\n\n\n\n\n\n\nThis section covers: - Log scale plots - Axis Limits - Annotation - Arrows - Thicker gridlines - Shading of shapes - In-line labels - Category labels (such as all dashed lines mean something)\n\n\nSometimes plots are best represented with a Logarithmically-Scaled y-axis or logarithmically scaled x and y axes\n\nfig, axs = plt.subplots(1, 2)\nx = np.array([1, 2, 3, 4, 5])\ny = 10**x\n\naxs[0].plot(x,y)\naxs[0].set_title('Normal Scaling')\n\naxs[1].set_yscale('log')\naxs[1].plot(x,y)\naxs[1].set_title('Logarithmic Scaling');\n\n\n\n\n\n\n\nYou can limit the view of the window by adjusting the axes\n\nfig, ax = plt.subplots()\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\n\nax.plot(x,y)\n\nax.set_xlim(left=1, right=5)\nax.set_ylim(top=6, bottom=0);\n\n\n\n\n\n\n\nLabeling points is super useful for some plots\nDocumentation\n\nfig, ax = plt.subplots();\n\nx = [0, 1, 2, 3, 4]\ny = [9, 4, 7, -5, 8]\n\n#Default plt.plot shown in blue\nax.plot(x,y)\n\n#Scatter version shown in red\nax.scatter(x,y, color='red')\n\npointName = ['Name1', 'Name2', 'Name3', 'Name4', 'Name5']\nfor num in range(len(x)):\n    ax.annotate(text=pointName[num], xy=(x[num],y[num]));\n\n#xy could be adjusted per point to move the values to better locations\n\n\n\n\n\n\n\nPlotting arrows can show cycles more easily or all sorts of other fun applications\nDraw an arrow from (x, y) to (x+dx, y+dy).\nDocumentation\n\nfig, ax = plt.subplots()\n\nx = 5\ny = 0\ndx = 2\ndy = 4\n\nax.arrow(x,y,dx,dy, head_width=0.2, head_length=0.5, length_includes_head=True);\n\n#if given (x1, y1) and (x2, y2):\nx1 = 5\nx2 = 7\ny1 = 0\ny2 = 4\n\ndx = x2-x1\ndy = y2-y1\n\n\n\n\n\n\n\nYou can adjust all gridlines with this feature:\nax.xaxis.get_gridlines() & ax.yaxis.get_gridlines()\nOr\nThis you want to bold the singlular lines through 0 for example, or draw a horizontal line at a y value (or vertical line at an x value), this is what you would use:\nDocumentation:\n\nHorizontal Line\nVertical Line\n\n\nfig, ax = plt.subplots()\n\nax.grid()\n\n#color all x-grids red\nxgrids = ax.xaxis.get_gridlines()\nfor num in range(len(xgrids)):\n    xgrids[num].set_color('r')\n    xgrids[num].set_linewidth(2.5)\n\n#change one x-grid to green to show off indexing\n#index from 0 (starting on the left of the plot)\nxgrids[3].set_color('g')\nxgrids[3].set_linewidth(5)\n\n#color all y-grids blue\nygrids = ax.yaxis.get_gridlines()\nfor num in range(len(ygrids)):\n    ygrids[num].set_color('b')\n    ygrids[num].set_linewidth(3)\n\n#change one y-grid to yellow to show off indexing\n#index from 0 (starting on the bottom on the plot)\nygrids[3].set_color('y')\nygrids[3].set_linewidth(5)\n\n\n\n\n\nfig, ax = plt.subplots()\n\nax.grid()\n\nax.axhline(y=0, color='k', linewidth=2)\nax.axvline(x=0, color='k', linewidth=4)\n\nax.axhline(y=2.15, color='b', linewidth=3);\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots();\n\n#has 4 items since its a square\nx_square = [0, 1, 1, 0]\ny_square = [0, 0, 1, 1]\n\n#has 3 items since its a triangle\nx_triangle = [2, 3, 4]\ny_triangle = [2, 6, 4]\n\nax.fill(x_square, y_square)\nax.fill(x_triangle, y_triangle, color='r', alpha=0.4);\n\n\n\n\n\n\n\nSomeone came up with this awesome system for in-line labeling that I use frequently. The link to the original is provided here if you want to read about it from the source\n\ndef label_line(line,x,label=None,align=True,**kwargs):\n\n    ax = line.axes\n    xdata = line.get_xdata()\n    ydata = line.get_ydata()\n\n    if (x &lt; xdata[0]) or (x &gt; xdata[-1]):\n        print('x label location is outside data range!')\n        return\n\n    #Find corresponding y co-ordinate and angle of the line\n    ip = 1\n    for i in range(len(xdata)):\n        if x &lt; xdata[i]:\n            ip = i\n            break\n\n    y = ydata[ip-1] + (ydata[ip]-ydata[ip-1])*(x-xdata[ip-1])/(xdata[ip]-xdata[ip-1])\n\n    if not label:\n        label = line.get_label()\n\n    if align:\n        #Compute the slope\n        dx = xdata[ip] - xdata[ip-1]\n        dy = ydata[ip] - ydata[ip-1]\n        ang = np.degrees(np.arctan2(dy,dx))\n\n        #Transform to screen co-ordinates\n        pt = np.array([x,y]).reshape((1,2))\n        trans_angle = ax.transData.transform_angles(np.array((ang,)),pt)[0]\n\n    else:\n        trans_angle = 0\n\n    #Set a bunch of keyword arguments\n    if 'color' not in kwargs:\n        kwargs['color'] = line.get_color()\n\n    if ('horizontalalignment' not in kwargs) and ('ha' not in kwargs):\n        kwargs['ha'] = 'center'\n\n    if ('verticalalignment' not in kwargs) and ('va' not in kwargs):\n        kwargs['va'] = 'center'\n\n    if 'backgroundcolor' not in kwargs:\n        kwargs['backgroundcolor'] = ax.get_facecolor()\n\n    if 'clip_on' not in kwargs:\n        kwargs['clip_on'] = True\n\n    if 'zorder' not in kwargs:\n        kwargs['zorder'] = 2.5\n\n    ax.text(x,y,label,rotation=trans_angle,**kwargs)\n\n\ndef label_lines(lines,align=True,xvals=None,**kwargs):\n\n    ax = lines[0].axes\n    labLines = []\n    labels = []\n\n    #Take only the lines which have labels other than the default ones\n    for line in lines:\n        label = line.get_label()\n        if \"_line\" not in label:\n            labLines.append(line)\n            labels.append(label)\n\n    if xvals is None:\n        xmin,xmax = ax.get_xlim()\n        xvals = np.linspace(xmin,xmax,len(labLines)+2)[1:-1]\n\n    for line,x,label in zip(labLines,xvals,labels):\n        label_line(line,x,label,align,**kwargs)\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\ny_list = [y1, y2, y3, y4]\nname_list = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\nax.grid()\n\n#maybe not the best showcase of the possibilities, but a good tool nonetheless\nlabel_lines(plt.gca().get_lines(),align=False,fontsize=10)\n\n\n\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\ny_list = [y1, y2, y3, y4]\nname_list = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\nfor num, y in enumerate(y_list):\n    ax.plot(x,y, label=name_list[num])\n\nax.grid()\n\n#maybe not the best showcase of the possibilities, but a good tool nonetheless\nlabel_lines(plt.gca().get_lines(),zorder=2.5, color='grey')\n\n\n\n\n\n\n\nWhat if we want to say all dashed lines mean something? What if we want to put something in the legend we don’t want to see?\nWe can do that with “Category Labeling”\n\nfig, ax = plt.subplots(figsize=(10,8))\nx = np.linspace(0, 5, 50)\ny1 = np.sqrt(x)\ny1b = np.sqrt(x)+ 30\ny2 = x**2\ny3 = x**(1/3)\ny4 = x**3\ny4b = x**3 + 20\n\nax.plot(x, y1, linestyle='--', color='r')\nax.plot(x, y1b, linestyle='--', color='r')\nax.plot(x,y2, color='g')\nax.plot(x, y3, linestyle='--', color='b')\nax.plot(x,y4, color = 'y')\nax.plot(x,y4b, color='y')\n\n#we can use a fancy trick to plot a single point (which won't show up on the plot)\nax.plot([0],[0], color = 'r', label='Square root function')\nax.plot([0],[0], color = 'g', label='Square function')\nax.plot([0],[0], color = 'b', label='Cube root function')\nax.plot([0],[0], color = 'y', label='Cubic function')\nax.plot([0],[0], color = 'grey', linestyle = '--', label='Root function')\nax.plot([0],[0], color = 'grey', label='Power function')\n\nplt.legend(title='Showcase Category Labels:', title_fontsize=16, fontsize=12);\n\n\n\n\n\n\n\n\nTired of always looking up the GW colors for figures, I sure am. Here’s a faster way!\nOrder matters, will always plot the first line without a color label as the first color in the given list, then the 2nd as the 2nd color, etc\nIf it gets to the end of the list, it will begin from the beginning with the 1st color hence “Cycler”\n\nfrom cycler import cycler\n\nimport matplotlib as mpl\n\n#save this default for later when we need it\nprop_cycle = mpl.rcParams['axes.prop_cycle']\n\n\n#Cycle 1:\n#in order: GW red, GW green, GW Yellow, GW Blue\ncolorlist1 = ['#C9102F', '#008364', '#FFC72C', '#033C5A']\nmpl.rcParams['axes.prop_cycle'] = cycler(color=colorlist1)\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\n\n\nylist = [y1, y2, y3, y4]\nnamelist = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree']\n\n#no color parameter specified, but matplotlib defaults to the sequence we told it to\nfor num, y in enumerate(ylist):\n    ax.plot(x,y, label=namelist[num])\n\nax.legend();\n\n\n\n\n\n#Cycle 2:\n#in order: GW blue, GW light blue, GW buff, GW dark green, GW Brown\ncolorlist2 = ['#033C5A', '#0073AA', '#AA9868', '#008364', '#A75523']\nmpl.rcParams['axes.prop_cycle'] = cycler(color=colorlist2)\n\nfig, ax = plt.subplots(1,1, figsize=(6,4))\n\n#powers of x\nx = np.linspace(0, 5, 100)\ny1 = x\ny2 = x**2\ny3 = x**3\ny4 = x**4\ny5 = x**5\n\nylist = [y1, y2, y3, y4, y5]\nnamelist = ['1st Degree', '2nd Degree', '3rd Degree', '4th Degree', '5th Degree']\n\n#no color parameter specified, but matplotlib defaults to the sequence we told it to\nfor num, y in enumerate(ylist):\n    ax.plot(x,y, label=namelist[num])\n\nax.legend();\n\n\n\n\n\n#here's the full GW color system (excluding black and white) in one list if you have a lot of lines to plot\nGW_COLOR_LIST = ['#C9102F', '#008364', '#FFC72C', '#033C5A', '#0073AA', '#AA9868', '#008364', '#A75523']\nmpl.rcParams['axes.prop_cycle'] = cycler(color=GW_COLOR_LIST)\n\n#but we will go back to defaults\nmpl.rcParams['axes.prop_cycle'] = prop_cycle\n\n\n\n\n\nfrom mpl_toolkits import mplot3d\n\n\n#basic 3D plot initialization\nfig = plt.figure(figsize=(6,5))\nax = plt.axes(projection='3d')\n\n\n\n\n\n\n\n#line plots\nfig = plt.figure(figsize=(6,5))\nax = plt.axes(projection='3d')\n\nx = np.linspace(0, 5, 50)\ny = np.sin(np.linspace(0, 10, 50))\nz = np.cos(x) * y\n\nax.plot3D(x, y, z);\n\n\n\n\n\n#scatter plot\nfig = plt.figure(figsize=(6,5))\nax = plt.axes(projection='3d')\n\nx = np.linspace(0, 10, 10)\ny = (x+67)**2\nz = np.cos(x)\n\nax.scatter3D(x,y,z);\n\n\n\n\n\n\n\nContour - Imagine making rings at differing elevations of a surface, then plot the rings\nWireframe - Gridded mesh of surface structures\nSurface - Solid surface plot\nEach style has benefits and downsides for representation of data, so I’ve included them all to make it easy to know the options\nExtra Notes:\nnp.meshgrid is commonly used in 3d plots. Meshgrid documentation\n\n#this function is commonly used in math classes because it looks fun\ndef f(x, y):\n    return (np.sin(np.sqrt(x**2 + y**2)))\n\n\n#contour plot example\nx = np.linspace(-8, 8, 50)\ny = np.linspace(-8, 8, 50)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(8,6))\nax = plt.axes(projection='3d')\n\n#4th parameter here indicates the number of elevation rings used\nax.contour3D(X, Y, Z, 30);\n\n\n\n\n\n#wireframe example\nx = np.linspace(-8, 8, 50)\ny = np.linspace(-8, 8, 50)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(8,6))\nax = plt.axes(projection='3d')\n\nax.plot_wireframe(X, Y, Z);\n\n\n\n\n\n#surface plot example\nx = np.linspace(-8, 8, 50)\ny = np.linspace(-8, 8, 50)\n\nX, Y = np.meshgrid(x, y)\nZ = f(X, Y)\n\nfig = plt.figure(figsize=(8,6))\nax = plt.axes(projection='3d')\n\nax.plot_surface(X, Y, Z);"
  },
  {
    "objectID": "download/Week5/Demo4-FollowAlong.html",
    "href": "download/Week5/Demo4-FollowAlong.html",
    "title": "Demo 4 - Matplotlib Deeper Dive",
    "section": "",
    "text": "This is a place for you to follow along live!\nUse Shift+Enter to run a cell!\n\n#Start typing code below!"
  },
  {
    "objectID": "vscode-mac.html",
    "href": "vscode-mac.html",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your macOS computer. VS Code provides a powerful environment for coding and development across various programming languages.\n\n\n\nBefore you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\n\n\n\n\n\n\nVisit the official VS Code download page at https://code.visualstudio.com/download.\n\n\n\nClick on the “macOS” download link to download the Visual Studio Code for macOS.\n\n\n\nDownload VS Code\n\n\n\n\n\nAllow Download\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the VS Code disk image (.dmg) file to open it.\n\n\n\n\nLocate file\n\n\n\n\n\nOpen DMG\n\n\n\n\n\n\nOpen your “Launchpad” and locate the “Visual Studio Code” application. Double-click it to launch the editor.\n\n\n\nLaunch VS Code\n\n\n\n\n\nUpon launching, you can customize Visual Studio Code by installing extensions, themes, and configuring settings to suit your development needs. (Optional)\n\n\n\nCustomize VS Code\n\n\n\n\n\nOn the sidebar click on the Extensions tab.\n\n\n\nExtensions tab\n\n\n\n\n\nUnder the “Popular” select “Python”.\n\n\n\nSearch Python\n\n\n\n\n\nOn the right panel click on the install button to install the extension.\n\n\n\nInstall Python Extension\n\n\n\n\n\nClick on the File tab from the toolbar and open a New File.\n\n\n\nOpen New File\n\n\n\n\n\nFrom the drop down menu, select “Jupyter Notebook” as the file type.\n\n\n\nOpen Jupyter Notebook\n\n\n\n\n\n\nCongratulations! You’ve successfully installed Visual Studio Code on your macOS computer. VS Code is now ready for you to use as a powerful code editor for various programming languages.\nFeel free to explore the extensions marketplace and customize VS Code to enhance your coding experience. Happy coding!\nFor more information and documentation on Visual Studio Code, visit https://code.visualstudio.com/docs.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "vscode-mac.html#introduction",
    "href": "vscode-mac.html#introduction",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Visual Studio Code (VS Code), a popular and versatile code editor, on your macOS computer. VS Code provides a powerful environment for coding and development across various programming languages."
  },
  {
    "objectID": "vscode-mac.html#prerequisites",
    "href": "vscode-mac.html#prerequisites",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection."
  },
  {
    "objectID": "vscode-mac.html#installation-steps",
    "href": "vscode-mac.html#installation-steps",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "",
    "text": "Visit the official VS Code download page at https://code.visualstudio.com/download.\n\n\n\nClick on the “macOS” download link to download the Visual Studio Code for macOS.\n\n\n\nDownload VS Code\n\n\n\n\n\nAllow Download\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the VS Code disk image (.dmg) file to open it.\n\n\n\n\nLocate file\n\n\n\n\n\nOpen DMG\n\n\n\n\n\n\nOpen your “Launchpad” and locate the “Visual Studio Code” application. Double-click it to launch the editor.\n\n\n\nLaunch VS Code\n\n\n\n\n\nUpon launching, you can customize Visual Studio Code by installing extensions, themes, and configuring settings to suit your development needs. (Optional)\n\n\n\nCustomize VS Code\n\n\n\n\n\nOn the sidebar click on the Extensions tab.\n\n\n\nExtensions tab\n\n\n\n\n\nUnder the “Popular” select “Python”.\n\n\n\nSearch Python\n\n\n\n\n\nOn the right panel click on the install button to install the extension.\n\n\n\nInstall Python Extension\n\n\n\n\n\nClick on the File tab from the toolbar and open a New File.\n\n\n\nOpen New File\n\n\n\n\n\nFrom the drop down menu, select “Jupyter Notebook” as the file type.\n\n\n\nOpen Jupyter Notebook"
  },
  {
    "objectID": "vscode-mac.html#conclusion",
    "href": "vscode-mac.html#conclusion",
    "title": "Visual Studio Code Installation Guide for macOS",
    "section": "",
    "text": "Congratulations! You’ve successfully installed Visual Studio Code on your macOS computer. VS Code is now ready for you to use as a powerful code editor for various programming languages.\nFeel free to explore the extensions marketplace and customize VS Code to enhance your coding experience. Happy coding!\nFor more information and documentation on Visual Studio Code, visit https://code.visualstudio.com/docs.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "instructor.html",
    "href": "instructor.html",
    "title": "Instruction Team",
    "section": "",
    "text": "Dr. Kartik V. Bulusu is an Associate Professor of Practice in the Department of Computer Science (CS) and Associate Research Professor in the Department of Mechanical and Aerospace Engineering (MAE).\nHis research work entails human health and sustainable energy with a focus on biofluid mechanics, polymer rheology, low-cost energy technologies, and applications of wavelet transforms.\nHe is also working on AI-on-the-edge applications using low-power devices. In his free time, he loves to tinker with electronics and design low-cost experiments for research and education.\nDr. Bulusu has been developing low-cost ejector technologies refrigeration in disaster-prone regions and humanitarian needs.\nOffice Hours: On-Demand (Please reach out via email)\nLocation: Blackboard Collaborate Course Room\n\n\n  Campus Address: SEH 3640\nEmail: bulusu at gwu dot edu"
  },
  {
    "objectID": "instructor.html#dr.-kartik-bulusu-instructor",
    "href": "instructor.html#dr.-kartik-bulusu-instructor",
    "title": "Instruction Team",
    "section": "",
    "text": "Dr. Kartik V. Bulusu is an Associate Professor of Practice in the Department of Computer Science (CS) and Associate Research Professor in the Department of Mechanical and Aerospace Engineering (MAE).\nHis research work entails human health and sustainable energy with a focus on biofluid mechanics, polymer rheology, low-cost energy technologies, and applications of wavelet transforms.\nHe is also working on AI-on-the-edge applications using low-power devices. In his free time, he loves to tinker with electronics and design low-cost experiments for research and education.\nDr. Bulusu has been developing low-cost ejector technologies refrigeration in disaster-prone regions and humanitarian needs.\nOffice Hours: On-Demand (Please reach out via email)\nLocation: Blackboard Collaborate Course Room\n\n\n  Campus Address: SEH 3640\nEmail: bulusu at gwu dot edu"
  },
  {
    "objectID": "instructor.html#oscar-southwell-gta",
    "href": "instructor.html#oscar-southwell-gta",
    "title": "Instruction Team",
    "section": "Oscar Southwell (GTA)",
    "text": "Oscar Southwell (GTA)\n\n\n\n\nOscar Southwell is a graduate student studying Engineering Management, who received his bachelor’s in mechanical engineering at GW this past spring. Originally from London, United Kingdom, he has experience working as an engineering intern for the Pennsylvanian Department of Transportation and as a science and tech instructor in Philadelphia.\nDuring his time as an undergraduate, he was significantly involved in programs from the GW Office of Entrepreneurship and Innovation, winning prizes in the George Hacks and Pitch George competitions and completing the Fall 2022 I-Corps Program.\nHe currently serves as the treasurer for the GW Men’s Club Soccer team and American Society of Mechanical Engineers section.\nOffice Hours: Monday & Tuesday (5 PM - 6 PM)\nLocation: Tompkins Hall (Room 409)"
  },
  {
    "objectID": "instructor.html#sameen-ahmad-uta",
    "href": "instructor.html#sameen-ahmad-uta",
    "title": "Instruction Team",
    "section": "Sameen Ahmad (UTA)",
    "text": "Sameen Ahmad (UTA)\n\n\n\n\nSameen is a junior majoring in Computer Science. She is from the DMV area (Arlington, VA) and is interested in cybersecurity and artificial intelligence. Ever since Sameen developed her passion for computer science, it has been her goal to combine it with social change.\nSameen is the Executive Secretary of Undergraduate Academic Affairs - The Student Association Executive Branch, and the Chair of the SEAS Together Committee. Sameen has been a committee member of the GW Computer Science Justice, Equity, Diversity, and Inclusion (JEDI) Committee since her freshmen year, Co-President for Girls Who Code College Loop at GW, SEASSPAN Undergraduate Ambassador Mentor, the Recruitment and Mentorship Director of WiCS (Women in Computer Science), Member of the University Integrity and Conduct Council, and the University Grievance Committee. In her free time, she enjoys spending time with her family and friends and loves trying out new food.\nSameen is super EXCITED to be the UTA for this class and can not wait to meet everyone!!\nOffice Hours: Wednesday (1 PM - 3 PM)"
  },
  {
    "objectID": "instructor.html#talia-novack-uta",
    "href": "instructor.html#talia-novack-uta",
    "title": "Instruction Team",
    "section": "Talia Novack (UTA)",
    "text": "Talia Novack (UTA)\n\n\n\n\nTalia is a Junior studying Computer Science with a minor in Astronomy and Astrophysics. She is a part of Women in Computer Science and ACM. Talia is interested in space as well as AI applications in our modern world. Outside of CS, Talia’s whole life is WRGW District Radio: GW’s radio station where she is the Programming Director.\nIn her free time, she enjoys hanging out with friends, being outside, and lifting weights. Talia is pumped to be a UTA for this course and can’t wait to get to some Python programming!!\nOffice Hours: Wednesday (4 PM - 6 PM)"
  },
  {
    "objectID": "instructor.html#manue-alaimo-la",
    "href": "instructor.html#manue-alaimo-la",
    "title": "Instruction Team",
    "section": "Manue Alaimo (LA)",
    "text": "Manue Alaimo (LA)\n\n\n\n\nManue is a senior studying Computer Science and is from Pennsylvania. They have an interest in IoT devices, machine learning, and artificial intelligence.\nOver the summer Manue worked as a software engineering intern in the financial technology industry for one of the largest global banks. On campus, they are involved in JEDI (Learn more here!). In their free time, they like to run, play frisbee, and try out new coffee shops around DC.\nOffice Hours: Wednesday (5 PM - 7 PM)\nLocation: SEH 4th floor"
  },
  {
    "objectID": "instructor.html#selman-eris-la",
    "href": "instructor.html#selman-eris-la",
    "title": "Instruction Team",
    "section": "Selman Eris (LA)",
    "text": "Selman Eris (LA)\n\n\n\n\nSelman Eris is a senior studying Computer Science. He grew up in Istanbul, Turkey and transferred to GWU after completing freshman year at Istanbul Technical University. He is interested in real-time AI and edge devices. Last summer, he worked in Professor Narahari and Professor Bulusu’s lab focusing on imprecise computation and real-time AI.\nIn his free time, he enjoys playing video games, listening to music and spending time with his family and friends.\nOffice Hours: Monday (12 PM - 2 PM)"
  },
  {
    "objectID": "instructor.html#saif-alzaabi-la",
    "href": "instructor.html#saif-alzaabi-la",
    "title": "Instruction Team",
    "section": "Saif Alzaabi (LA)",
    "text": "Saif Alzaabi (LA)\n\n\n\n\nSaif Alzaabi is a senior graduating this semester. He is majoring in Computer Science and Economics. His main interest is in financial technologies, and is hoping to enter that field after graduation. Outside of studying, Saif trains in martial arts, mainly Brazilian Jiu-Jitsu.\nOffice Hours: Tuesday (2 PM - 4 PM)\nLocation: SEH 4th floor"
  },
  {
    "objectID": "instructor.html#gustavo-londono-la",
    "href": "instructor.html#gustavo-londono-la",
    "title": "Instruction Team",
    "section": "Gustavo Londono (LA)",
    "text": "Gustavo Londono (LA)\n\n\n\n\nGustavo is a sophomore studying Computer Science here at GW and is originally from Rhode Island. He’s particularly interested in software engineering and cybersecurity, both of which he hopes to apply to his future career.\nGustavo enjoys reading, working on side projects, and watching tv shows. He’s also a part of GWU Robotics, GW Rocket, and participates in both student/university theater.\nOffice Hours: Sunday (2 PM - 4 PM)\nLocation: Tompkins Hall (Room 402)"
  },
  {
    "objectID": "instructor.html#amy-longua-la",
    "href": "instructor.html#amy-longua-la",
    "title": "Instruction Team",
    "section": "Amy Longua (LA)",
    "text": "Amy Longua (LA)\n\n\n\n\nMy name is Amy. I’m a computer science sophomore and I’ll be one of your LAs this fall. I had very little coding experience but I took CSCI1010 last year and it was one of my favorites which is why I decided to LA for it! I’m also a part of WiCS and ACM. So if you see me at one of their events, come say “Hi”.\nOffice Hours: Sunday (12 PM - 2 PM)\nLocation: SEH 4th floor"
  },
  {
    "objectID": "instructor.html#pravin-khanal-la",
    "href": "instructor.html#pravin-khanal-la",
    "title": "Instruction Team",
    "section": "Pravin Khanal (LA)",
    "text": "Pravin Khanal (LA)\n\n\n\n\nHello, I am Pravin Khanal. I am a Senior in CS so I have been here for a while. My current hobby is playing volleyball. I found out they have sand courts near the Lincoln Memorial in the spring semester of my Junior year and I have been addicted ever since.\nCS1010 was a fun class for me and was a great introduction to the CS department. I hope I am able to be of assistance to you all and get to know you guys.\nOffice Hours: Wednesday (11 AM - 1 PM)"
  },
  {
    "objectID": "instructor.html#rutvik-solanki-grader",
    "href": "instructor.html#rutvik-solanki-grader",
    "title": "Instruction Team",
    "section": "Rutvik Solanki (Grader)",
    "text": "Rutvik Solanki (Grader)\n\n\n\n\nHey there, I’m Rutvik Solanki, a passionate grad student delving into the world of Computer Science. My journey began in India, where I completed my undergraduate studies at the Symbiosis Institute of Technology. It was during these formative years that I developed a keen interest in all things tech.\nBefore embarking on my graduate studies at GWU, I had the incredible opportunity to work as both a Data Scientist intern and a DevOps intern for a dynamic startup. These experiences not only honed my skills but also fueled my curiosity to explore the ever-evolving tech landscape.\nBut it’s not all about screens and keyboards. I’m an avid sports enthusiast, and cricket holds a special place in my heart. There’s nothing quite like the thrill of a good cricket match. And when I’m looking to break a sweat and enjoy some friendly competition, you might catch me on the volleyball court, spiking and setting with the folks at Volo.\nIn addition to my academic pursuits, I take on the responsibility of maintaining the CS1010 course website. It’s a role that I take seriously, as I believe that a well-structured online platform is essential for enhancing the learning experience of fellow students.\nSo, whether it’s coding, sports, or web maintenance, I’m always up for a challenge. Feel free to reach out, and let’s embark on this exciting journey together!\n\n\n\n\n\n\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "python3-windows.html",
    "href": "python3-windows.html",
    "title": "Installing Python and Jupyter on Windows",
    "section": "",
    "text": "In this guide, we will walk you through the process of installing Python on Windows, configuring the user-specific Python bin path, and exporting it in your system environment variables. Additionally, we will install and launch Jupyter Notebook, a popular tool for interactive Python development.\n\n\n\nVisit the official Python website: https://www.python.org/downloads/windows/.\nDownload the latest version of Python for Windows by clicking on the “Download Windows installer” button.\nOpen the downloaded installer (e.g., python-X.Y.Z-amd64.exe), where X.Y.Z represents the Python version, and follow the installation instructions. Make sure to check the box that says “Add Python X.Y to PATH.”\n\n\n\n\nTo ensure that Python is installed correctly, open your Command Prompt and run the following command:\npython --version\nThis command will display the Python version, confirming that it’s successfully installed.\n\n\n\nTo install Jupyter Notebook, open your Command Prompt and run the following command:\npip install jupyter\nThis command will download and install Jupyter Notebook, a powerful tool for interactive Python development.\n\n\n\nTo locate the path to the Python scripts folder through the Command Prompt, follow these steps:\n\nOpen your Command Prompt.\nRun the following command to find the Python scripts folder:\n\npython -m site --user-site\nThis command will display the path to your user-specific Python libraries, including the scripts folder.\n\n\n\nNow that you have the path to the Python scripts folder, you can set up the Python bin path and add it to your system environment variables. Follow these steps:\n\nOpen the Start menu and search for “Environment Variables.”\nClick on “Edit the system environment variables.”\nIn the System Properties window, click the “Environment Variables” button.\nUnder the “System Variables” section, find and select the “Path” variable, then click the “Edit” button.\nClick “New” and add the path to your Python scripts folder that you obtained in Step 4.\nClick “OK” to save the changes.\n\n\n\n\nTo start Jupyter Notebook, open your Command Prompt and run the following command:\njupyter notebook\nThis command will launch the Jupyter Notebook in your default web browser, allowing you to create and run Python notebooks for interactive coding and data analysis.\nConclusion You have successfully installed Python, configured the user-specific Python bin path, and set up your system environment variables on your Windows system. You can now use Jupyter Notebook for interactive coding and data analysis.\nHappy coding!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "python3-windows.html#step-1-download-and-install-python",
    "href": "python3-windows.html#step-1-download-and-install-python",
    "title": "Installing Python and Jupyter on Windows",
    "section": "",
    "text": "Visit the official Python website: https://www.python.org/downloads/windows/.\nDownload the latest version of Python for Windows by clicking on the “Download Windows installer” button.\nOpen the downloaded installer (e.g., python-X.Y.Z-amd64.exe), where X.Y.Z represents the Python version, and follow the installation instructions. Make sure to check the box that says “Add Python X.Y to PATH.”"
  },
  {
    "objectID": "python3-windows.html#step-2-verify-python-installation",
    "href": "python3-windows.html#step-2-verify-python-installation",
    "title": "Installing Python and Jupyter on Windows",
    "section": "",
    "text": "To ensure that Python is installed correctly, open your Command Prompt and run the following command:\npython --version\nThis command will display the Python version, confirming that it’s successfully installed."
  },
  {
    "objectID": "python3-windows.html#step-3-install-jupyter-notebook",
    "href": "python3-windows.html#step-3-install-jupyter-notebook",
    "title": "Installing Python and Jupyter on Windows",
    "section": "",
    "text": "To install Jupyter Notebook, open your Command Prompt and run the following command:\npip install jupyter\nThis command will download and install Jupyter Notebook, a powerful tool for interactive Python development."
  },
  {
    "objectID": "python3-windows.html#step-4-find-the-path-to-python-scripts-folder",
    "href": "python3-windows.html#step-4-find-the-path-to-python-scripts-folder",
    "title": "Installing Python and Jupyter on Windows",
    "section": "",
    "text": "To locate the path to the Python scripts folder through the Command Prompt, follow these steps:\n\nOpen your Command Prompt.\nRun the following command to find the Python scripts folder:\n\npython -m site --user-site\nThis command will display the path to your user-specific Python libraries, including the scripts folder."
  },
  {
    "objectID": "python3-windows.html#step-5-configure-python-bin-path",
    "href": "python3-windows.html#step-5-configure-python-bin-path",
    "title": "Installing Python and Jupyter on Windows",
    "section": "",
    "text": "Now that you have the path to the Python scripts folder, you can set up the Python bin path and add it to your system environment variables. Follow these steps:\n\nOpen the Start menu and search for “Environment Variables.”\nClick on “Edit the system environment variables.”\nIn the System Properties window, click the “Environment Variables” button.\nUnder the “System Variables” section, find and select the “Path” variable, then click the “Edit” button.\nClick “New” and add the path to your Python scripts folder that you obtained in Step 4.\nClick “OK” to save the changes."
  },
  {
    "objectID": "python3-windows.html#step-6-launch-jupyter-notebook",
    "href": "python3-windows.html#step-6-launch-jupyter-notebook",
    "title": "Installing Python and Jupyter on Windows",
    "section": "",
    "text": "To start Jupyter Notebook, open your Command Prompt and run the following command:\njupyter notebook\nThis command will launch the Jupyter Notebook in your default web browser, allowing you to create and run Python notebooks for interactive coding and data analysis.\nConclusion You have successfully installed Python, configured the user-specific Python bin path, and set up your system environment variables on your Windows system. You can now use Jupyter Notebook for interactive coding and data analysis.\nHappy coding!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week3-matrices.html",
    "href": "lecture_notes/week3-matrices.html",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 20). Week-3 Presentation: CSCI1010 Computer Science Orientation [Introduction to Matrices with Python.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n\n\n\nSlide 2\n\n\n\n\n\n Source: http://giphy.com/search/matrix-gif\n\n\n\n Sources:\nhttps://numpy.org\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.0.html\nhttps://numpy.org/doc/stable/user/absolute_beginners.html\n\n\n\n Source: http://en.wikipedia.org/wiki/Matrix_(mathematics)\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\n\n\n\nSlide 7\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week3-matrices.html#introduction-to-matrices-with-python",
    "href": "lecture_notes/week3-matrices.html#introduction-to-matrices-with-python",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 20). Week-3 Presentation: CSCI1010 Computer Science Orientation [Introduction to Matrices with Python.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n\n\n\nSlide 2\n\n\n\n\n\n Source: http://giphy.com/search/matrix-gif\n\n\n\n Sources:\nhttps://numpy.org\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.0.html\nhttps://numpy.org/doc/stable/user/absolute_beginners.html\n\n\n\n Source: http://en.wikipedia.org/wiki/Matrix_(mathematics)\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\n\n\n\nSlide 7\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week3-rasp-pi-ultrasound.html",
    "href": "lecture_notes/week3-rasp-pi-ultrasound.html",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 20). Week-3 Presentation: CSCI1010 Computer Science Orientation [From LED Madness to Ultrasound Cacophony.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n Source: https://www.raspberrypi.org/help/\n\n\n\n\n\n\nSlide 3\n\n\n\n\n\n\n\n\nSlide 4\n\n\n\n\n\n\n\n\nSlide 5\n\n\n\n\n\n Source: https://youtu.be/Rr9RaisO11E\n\n\n\n\n\n\n\nSlide 7\n\n\n\n\n\n\n\n\nSlide 8\n\n\n\n\n\n\n\n\nSlide 9\n\n\n\n\n\n\n\n\nSlide 10\n\n\n\n\n\n\n\n\nSlide 11\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week3-rasp-pi-ultrasound.html#from-led-madness-to-ultrasound-cacophony",
    "href": "lecture_notes/week3-rasp-pi-ultrasound.html#from-led-madness-to-ultrasound-cacophony",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 20). Week-3 Presentation: CSCI1010 Computer Science Orientation [From LED Madness to Ultrasound Cacophony.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n Source: https://www.raspberrypi.org/help/\n\n\n\n\n\n\nSlide 3\n\n\n\n\n\n\n\n\nSlide 4\n\n\n\n\n\n\n\n\nSlide 5\n\n\n\n\n\n Source: https://youtu.be/Rr9RaisO11E\n\n\n\n\n\n\n\nSlide 7\n\n\n\n\n\n\n\n\nSlide 8\n\n\n\n\n\n\n\n\nSlide 9\n\n\n\n\n\n\n\n\nSlide 10\n\n\n\n\n\n\n\n\nSlide 11\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week1-rasp-pi.html",
    "href": "lecture_notes/week1-rasp-pi.html",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 6). Week-1 Presentation: CSCI1010 Computer Science Orientation [Introduction to the Raspberry Pi with Blinking LEDs]. Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n\n\n\nSlide 2\n\n\n\n\n\n Sources:\nCodecaemy: https://www.youtube.com/watch?v=EGQh5SZctaE\nPython Logo: https://commons.wikimedia.org/wiki/File:Python-logo-notext.svg#/media/File:Python-logo-notext.svg\nPython (Programming Language): https://commons.wikimedia.org/wiki/File:Python-logo-notext.svg#/media/File:Python-logo-notext.svg\n\n\n\n Python logo and other information: https://commons.wikimedia.org/wiki/File:Python-logo-notext.svg#/media/File:Python-logo-notext.svg\n\n\n\n Source: https://www.raspberrypi.org/help/\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\n\n\n\nSlide 7\n\n\n\n\n\n Source: https://www.sunfounder.com/learn/lesson-1-dual-color-led-sensor-kit-v2-0-for-b.html\n\n\n\n\n\n\nSlide 9\n\n\n\n\n\n\n\n\nSlide 10\n\n\n\n\n\n\n\n\nSlide 11\n\n\n\n\n\n\n\n\nSlide 12\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week1-rasp-pi.html#introduction-to-raspberry-pi-with-blinking-leds",
    "href": "lecture_notes/week1-rasp-pi.html#introduction-to-raspberry-pi-with-blinking-leds",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 6). Week-1 Presentation: CSCI1010 Computer Science Orientation [Introduction to the Raspberry Pi with Blinking LEDs]. Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n\n\n\nSlide 2\n\n\n\n\n\n Sources:\nCodecaemy: https://www.youtube.com/watch?v=EGQh5SZctaE\nPython Logo: https://commons.wikimedia.org/wiki/File:Python-logo-notext.svg#/media/File:Python-logo-notext.svg\nPython (Programming Language): https://commons.wikimedia.org/wiki/File:Python-logo-notext.svg#/media/File:Python-logo-notext.svg\n\n\n\n Python logo and other information: https://commons.wikimedia.org/wiki/File:Python-logo-notext.svg#/media/File:Python-logo-notext.svg\n\n\n\n Source: https://www.raspberrypi.org/help/\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\n\n\n\nSlide 7\n\n\n\n\n\n Source: https://www.sunfounder.com/learn/lesson-1-dual-color-led-sensor-kit-v2-0-for-b.html\n\n\n\n\n\n\nSlide 9\n\n\n\n\n\n\n\n\nSlide 10\n\n\n\n\n\n\n\n\nSlide 11\n\n\n\n\n\n\n\n\nSlide 12\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "in-class-exercise.html",
    "href": "in-class-exercise.html",
    "title": "Download and the Locate Course Material",
    "section": "",
    "text": "Visit the course webpage.\nClick on the “Schedule” tab to access the course schedule.\n\n\n\n\n\nIn the course schedule, find the “In-Class Python Exercise” and “HW2” section.\nYou will see a Download button “”.\nClick on the Download button “” next to “In-Class Python Exercise & HW2” to download the ZIP file.\n\n\n\n\n\n\n\nLocate the downloaded Week3.zip file. It should be in your “Downloads” folder.\nDouble-click on the Week3.zip file to unzip it.\nThis will create a “Week3” folder inside which you can find the .ipynb and .csv files along with the “HW2.ipynb” file.\n\n\n\n\n\nLocate the downloaded Week3.zip file. The ZIP file may be located in your “OneDrive” folder.\nRight-click on the Week3.zip file and select “Extract All…”\nFollow the on-screen instructions to unzip the file.\nThis will create a “Week3” folder inside which you can find the .ipynb and .csv files along with the “HW2.ipynb” file.\n\n\n\n\n\nNow that you have successfully unzipped the course materials, let’s access them using Anaconda Jupyter:\n\nOpen Anaconda Navigator, you must already have it installed on your computer. If not, please install Anaconda Navigator following the installation guide.\nLaunch Jupyter Notebook from Anaconda Navigator.\nNavigate to the “Week3” folder where you unzipped the ZIP file.\nAccess the course files, which should include .ipynb and .csv files for the exercises. To understand how to work with the HW files, refer to this guide.\n\n\n\n\n\n\n\nSave Changes\n\n\n\nDon’t forget to rename your file as shown in “Working with HW. ipynb files”, Step-2, as you work on them.\n\n\nCongratulations! You are now ready to start working with the course materials. If you encounter any issues, don’t hesitate to reach out to anyone from the instruction team via slack or email for assistance.\nEnjoy your Python programming journey!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "in-class-exercise.html#step-1-download-course-materials-for-week-3",
    "href": "in-class-exercise.html#step-1-download-course-materials-for-week-3",
    "title": "Download and the Locate Course Material",
    "section": "",
    "text": "Visit the course webpage.\nClick on the “Schedule” tab to access the course schedule."
  },
  {
    "objectID": "in-class-exercise.html#step-2-download-in-class-python-exercise-hw2-for-week-3",
    "href": "in-class-exercise.html#step-2-download-in-class-python-exercise-hw2-for-week-3",
    "title": "Download and the Locate Course Material",
    "section": "",
    "text": "In the course schedule, find the “In-Class Python Exercise” and “HW2” section.\nYou will see a Download button “”.\nClick on the Download button “” next to “In-Class Python Exercise & HW2” to download the ZIP file."
  },
  {
    "objectID": "in-class-exercise.html#step-3-manually-unzip-the-zip-file",
    "href": "in-class-exercise.html#step-3-manually-unzip-the-zip-file",
    "title": "Download and the Locate Course Material",
    "section": "",
    "text": "Locate the downloaded Week3.zip file. It should be in your “Downloads” folder.\nDouble-click on the Week3.zip file to unzip it.\nThis will create a “Week3” folder inside which you can find the .ipynb and .csv files along with the “HW2.ipynb” file.\n\n\n\n\n\nLocate the downloaded Week3.zip file. The ZIP file may be located in your “OneDrive” folder.\nRight-click on the Week3.zip file and select “Extract All…”\nFollow the on-screen instructions to unzip the file.\nThis will create a “Week3” folder inside which you can find the .ipynb and .csv files along with the “HW2.ipynb” file."
  },
  {
    "objectID": "in-class-exercise.html#step-4-access-course-files-with-anaconda",
    "href": "in-class-exercise.html#step-4-access-course-files-with-anaconda",
    "title": "Download and the Locate Course Material",
    "section": "",
    "text": "Now that you have successfully unzipped the course materials, let’s access them using Anaconda Jupyter:\n\nOpen Anaconda Navigator, you must already have it installed on your computer. If not, please install Anaconda Navigator following the installation guide.\nLaunch Jupyter Notebook from Anaconda Navigator.\nNavigate to the “Week3” folder where you unzipped the ZIP file.\nAccess the course files, which should include .ipynb and .csv files for the exercises. To understand how to work with the HW files, refer to this guide.\n\n\n\n\n\n\n\nSave Changes\n\n\n\nDon’t forget to rename your file as shown in “Working with HW. ipynb files”, Step-2, as you work on them.\n\n\nCongratulations! You are now ready to start working with the course materials. If you encounter any issues, don’t hesitate to reach out to anyone from the instruction team via slack or email for assistance.\nEnjoy your Python programming journey!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "python3-mac.html",
    "href": "python3-mac.html",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "In this guide, we will walk you through the process of installing Python on macOS, configuring the user-specific Python bin path, and exporting it in your ~/.zshrc file for easy access.\n\n\n\nVisit the official Python website: https://www.python.org/downloads/macos/\nDownload the latest version of Python for macOS by clicking on the “Download Python X.Y.Z” button (replace X.Y.Z with the latest version).\nOpen the downloaded installer and follow the installation instructions. Make sure to check the box that says “Add Python X.Y to PATH.”\n\n\n\n\nTo ensure that Python is installed correctly, open your terminal and run the following command:\npython3 --version\n\n\n\nTo install Jupyter Notebook, run the following command in your terminal:\npip3 install jupyter\nThis command will download and install Jupyter Notebook, a powerful tool for interactive Python development.\n\n\n\nNow, you will export the Python bin path in your ~/.zshrc file to make it accessible in your terminal sessions. To open ~/.zshrc for editing, follow these simplified steps:\n\nOpen your terminal.\nType the following command and press Enter:\n\nopen -e ~/.zshrc\nThis command will open your ~/.zshrc file in the default text editor.\n\nIn the text editor, add the following line at the end of the file:\n\nexport PATH=$PATH:$(python3 -m site --user-base)/bin\n\nSave the file and close the text editor.\n\n\n\n\nIf you receive an error indicating that the ~/.zshrc file does not exist, you can create it using the following command:\ntouch ~/.zshrc\nThis command will create an empty ~/.zshrc file if it doesn’t already exist.\nNow repeat Step 4.\n\n\n\nTo apply the changes, either restart your terminal or run the following command:\nsource ~/.zshrc\nYour Python installation is now set up and configured for use on macOS.\n\n\n\nTo start Jupyter Notebook, open your terminal and run the following command:\njupyter notebook\nThis command will launch the Jupyter Notebook in your default web browser, allowing you to create and run Python notebooks for interactive coding and data analysis.\n\n\n\nYou have successfully installed Python and Jupyter Notebook on your macOS system, configured the user-specific Python bin path, and exported it to your ~/.zshrc file for easy access. You can now use Jupyter Notebook for interactive coding and data analysis.\nHappy coding!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "python3-mac.html#step-1-download-and-install-python",
    "href": "python3-mac.html#step-1-download-and-install-python",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "Visit the official Python website: https://www.python.org/downloads/macos/\nDownload the latest version of Python for macOS by clicking on the “Download Python X.Y.Z” button (replace X.Y.Z with the latest version).\nOpen the downloaded installer and follow the installation instructions. Make sure to check the box that says “Add Python X.Y to PATH.”"
  },
  {
    "objectID": "python3-mac.html#step-2-verify-python-installation",
    "href": "python3-mac.html#step-2-verify-python-installation",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "To ensure that Python is installed correctly, open your terminal and run the following command:\npython3 --version"
  },
  {
    "objectID": "python3-mac.html#step-3-install-jupyter-notebook",
    "href": "python3-mac.html#step-3-install-jupyter-notebook",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "To install Jupyter Notebook, run the following command in your terminal:\npip3 install jupyter\nThis command will download and install Jupyter Notebook, a powerful tool for interactive Python development."
  },
  {
    "objectID": "python3-mac.html#step-4-export-python-bin-path-in-.zshrc",
    "href": "python3-mac.html#step-4-export-python-bin-path-in-.zshrc",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "Now, you will export the Python bin path in your ~/.zshrc file to make it accessible in your terminal sessions. To open ~/.zshrc for editing, follow these simplified steps:\n\nOpen your terminal.\nType the following command and press Enter:\n\nopen -e ~/.zshrc\nThis command will open your ~/.zshrc file in the default text editor.\n\nIn the text editor, add the following line at the end of the file:\n\nexport PATH=$PATH:$(python3 -m site --user-base)/bin\n\nSave the file and close the text editor."
  },
  {
    "objectID": "python3-mac.html#step-5-create-.zshrc-if-not-found",
    "href": "python3-mac.html#step-5-create-.zshrc-if-not-found",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "If you receive an error indicating that the ~/.zshrc file does not exist, you can create it using the following command:\ntouch ~/.zshrc\nThis command will create an empty ~/.zshrc file if it doesn’t already exist.\nNow repeat Step 4."
  },
  {
    "objectID": "python3-mac.html#step-6-apply-changes",
    "href": "python3-mac.html#step-6-apply-changes",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "To apply the changes, either restart your terminal or run the following command:\nsource ~/.zshrc\nYour Python installation is now set up and configured for use on macOS."
  },
  {
    "objectID": "python3-mac.html#step-7-launch-jupyter-notebook",
    "href": "python3-mac.html#step-7-launch-jupyter-notebook",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "To start Jupyter Notebook, open your terminal and run the following command:\njupyter notebook\nThis command will launch the Jupyter Notebook in your default web browser, allowing you to create and run Python notebooks for interactive coding and data analysis."
  },
  {
    "objectID": "python3-mac.html#conclusion",
    "href": "python3-mac.html#conclusion",
    "title": "Installing Python on macOS",
    "section": "",
    "text": "You have successfully installed Python and Jupyter Notebook on your macOS system, configured the user-specific Python bin path, and exported it to your ~/.zshrc file for easy access. You can now use Jupyter Notebook for interactive coding and data analysis.\nHappy coding!\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "anaconda-mac.html",
    "href": "anaconda-mac.html",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your macOS computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing.\n\n\n\nBefore you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\nSufficient disk space for the installation.\n\n\n\n\n\n\nVisit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the macOS section depending on you System-on-chip (Intel/M1/M2) to download the Anaconda installer for macOS.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the Anaconda disk image (.dmg) file to open it and click on “Allow” when prompted.\n\n\n\n\nRun Installer\n\n\n\n\n\nAllow Installation\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Continue” button and finally close the installation wizard by clicking on the “Close” button.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nMove the Installer to Trash\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a terminal open and the Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched\n\n\n\n\n\n\nCongratulations! You’ve successfully installed Anaconda and Jupyter on your macOS computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "anaconda-mac.html#introduction",
    "href": "anaconda-mac.html#introduction",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your macOS computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing."
  },
  {
    "objectID": "anaconda-mac.html#prerequisites",
    "href": "anaconda-mac.html#prerequisites",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA macOS computer.\nAn internet connection.\nSufficient disk space for the installation."
  },
  {
    "objectID": "anaconda-mac.html#installation-steps",
    "href": "anaconda-mac.html#installation-steps",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "Visit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the macOS section depending on you System-on-chip (Intel/M1/M2) to download the Anaconda installer for macOS.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the Anaconda disk image (.dmg) file to open it and click on “Allow” when prompted.\n\n\n\n\nRun Installer\n\n\n\n\n\nAllow Installation\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Continue” button and finally close the installation wizard by clicking on the “Close” button.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nMove the Installer to Trash\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a terminal open and the Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched"
  },
  {
    "objectID": "anaconda-mac.html#conclusion",
    "href": "anaconda-mac.html#conclusion",
    "title": "Anaconda Installation Guide for macOS",
    "section": "",
    "text": "Congratulations! You’ve successfully installed Anaconda and Jupyter on your macOS computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "standup.html",
    "href": "standup.html",
    "title": "Student guest speakers",
    "section": "",
    "text": "Marlee is a senior majoring in computer science with a minor in statistics and, during her time here, she has done a little of just about everything. That includes: being a TA, doing research, mentoring first year students, having internships, and leading student organizations. It’s safe to say there’s a space here for everyone, and she is excited to share it with you!\nEmail: marlenaalvino@gwmail.gwu.edu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSam is a senior majoring in computer science. During her time at GW, she’s had the opportunity to be on the leadership team for few different organizations, foster a positive learning environment as an LA and UTA, and speak to students like you who are just joining the CS community here. Outside of school, she’s had a few internships which have helped her get a better understanding of what possibilities are out there! She’s looking forward to sharing some of her experience with you.\nEmail: samkusner430@gwmail.gwu.edu\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKate is a senior majoring in computer science and has been coding since high school! Throughout her time at GW, she has been a TA for 3 different CS classes, held leadership positions in multiple orgs, and studied abroad in London. She is currently co-chair of WiCS (Women in Computer Science) at GW. She has also completed 2 summer internships, and is a member of Sigma Delta Tau. She’s excited to share how she has taken advantage of the opportunities available in CS at GW!\nEmail: khalushka@gwmail.gwu.edu\n\n\n\n\n\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "standup.html#marlee-alvino",
    "href": "standup.html#marlee-alvino",
    "title": "Student guest speakers",
    "section": "",
    "text": "Marlee is a senior majoring in computer science with a minor in statistics and, during her time here, she has done a little of just about everything. That includes: being a TA, doing research, mentoring first year students, having internships, and leading student organizations. It’s safe to say there’s a space here for everyone, and she is excited to share it with you!\nEmail: marlenaalvino@gwmail.gwu.edu"
  },
  {
    "objectID": "standup.html#samantha-kusner",
    "href": "standup.html#samantha-kusner",
    "title": "Student guest speakers",
    "section": "",
    "text": "Sam is a senior majoring in computer science. During her time at GW, she’s had the opportunity to be on the leadership team for few different organizations, foster a positive learning environment as an LA and UTA, and speak to students like you who are just joining the CS community here. Outside of school, she’s had a few internships which have helped her get a better understanding of what possibilities are out there! She’s looking forward to sharing some of her experience with you.\nEmail: samkusner430@gwmail.gwu.edu"
  },
  {
    "objectID": "standup.html#kate-halushka",
    "href": "standup.html#kate-halushka",
    "title": "Student guest speakers",
    "section": "",
    "text": "Kate is a senior majoring in computer science and has been coding since high school! Throughout her time at GW, she has been a TA for 3 different CS classes, held leadership positions in multiple orgs, and studied abroad in London. She is currently co-chair of WiCS (Women in Computer Science) at GW. She has also completed 2 summer internships, and is a member of Sigma Delta Tau. She’s excited to share how she has taken advantage of the opportunities available in CS at GW!\nEmail: khalushka@gwmail.gwu.edu\n\n\n\n\n\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "realvnc-mac-connect.html",
    "href": "realvnc-mac-connect.html",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "RealVNC is a remote desktop software that allows you to access your computer from anywhere. Follow the steps below to establish a remote using RealVNC on your Mac computer.\n\n\nBefore you begin, ensure that you have already installed RealVNC on your Mac.\n\n\n\n\n\nLaunch VNC Viewer from the Launchpad. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC Viewer\n\n\n\n\n\nDon’t Sign up\n\n\n\n\n\nTo connect to a Raspberry Pi, launch RealVNC Viewer, enter the IP address on the box into the address bar, and hit Enter. You may need to enter the login credentials for the Raspberry Pi.\n\n\n\nIP Address on the Box\n\n\n\n\n\nConnect to the Pi\n\n\n\n\n\nEnter Credentials\n\n\n\n\n\nYou are now connected to the Raspberry Pi, and you can control it.\n\n\n\nRemote Connection Successfull\n\n\n\n\n\nTo disconnect from the Raspberry Pi, simply close the VNC Viewer window.\n\n\n\n\nYou have successfully established connection to the Pi, allowing you to access and control it with ease.\nFor more information and support, you can visit the RealVNC website.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "realvnc-mac-connect.html#prerequisites",
    "href": "realvnc-mac-connect.html#prerequisites",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "Before you begin, ensure that you have already installed RealVNC on your Mac."
  },
  {
    "objectID": "realvnc-mac-connect.html#establish-a-connection",
    "href": "realvnc-mac-connect.html#establish-a-connection",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "Launch VNC Viewer from the Launchpad. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC Viewer\n\n\n\n\n\nDon’t Sign up\n\n\n\n\n\nTo connect to a Raspberry Pi, launch RealVNC Viewer, enter the IP address on the box into the address bar, and hit Enter. You may need to enter the login credentials for the Raspberry Pi.\n\n\n\nIP Address on the Box\n\n\n\n\n\nConnect to the Pi\n\n\n\n\n\nEnter Credentials\n\n\n\n\n\nYou are now connected to the Raspberry Pi, and you can control it.\n\n\n\nRemote Connection Successfull\n\n\n\n\n\nTo disconnect from the Raspberry Pi, simply close the VNC Viewer window."
  },
  {
    "objectID": "realvnc-mac-connect.html#conclusion",
    "href": "realvnc-mac-connect.html#conclusion",
    "title": "RealVNC Installation Guide for Mac",
    "section": "",
    "text": "You have successfully established connection to the Pi, allowing you to access and control it with ease.\nFor more information and support, you can visit the RealVNC website.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "homework.html",
    "href": "homework.html",
    "title": "Reminders",
    "section": "",
    "text": "In this guide, you will learn how to launch a local Jupyter server using Anaconda Navigator and open a HW file from your download folder. Make sure you have Anaconda installed on your computer before proceeding.\n\n\n\n\n\n\nReview Policy\n\n\n\nPlease review important information on course polices on collaboration among students before submitting your course deliverables.\n\n\n\n\n\n\n\n\nSave Changes\n\n\n\nDon’t forget to rename your file as shown in “Working with HW. ipynb files”, Step-2, as you work on them.\n\n\n\n\n\nSearch for “Anaconda Navigator” in your computer’s applications or start menu.\nClick on “Anaconda Navigator” to open it.\n\n\n\n\nmacOs\n\n\n\n\n\nWindows\n\n\n\n\n\n\nIn Anaconda Navigator, locate the “Jupyter Notebook” tile and click the “Launch” button next to it. This will launch a local Jupyter server on your computer.\n\n\n\n\nLaunch Jupyter Notebook\n\n\n\n\n\n\nAfter the Jupyter server has started, your default web browser will open with the Jupyter Dashboard. This dashboard is a web-based interface to your Jupyter environment.\n\n\n\n\nJupyter Dashboard - macOs\n\n\n\n\n\nJupyter Dashboard - Windows\n\n\n\nYou can navigate through your file system using the dashboard to locate and access your files."
  },
  {
    "objectID": "homework.html#launching-a-jupyter-server",
    "href": "homework.html#launching-a-jupyter-server",
    "title": "Reminders",
    "section": "",
    "text": "In this guide, you will learn how to launch a local Jupyter server using Anaconda Navigator and open a HW file from your download folder. Make sure you have Anaconda installed on your computer before proceeding.\n\n\n\n\n\n\nReview Policy\n\n\n\nPlease review important information on course polices on collaboration among students before submitting your course deliverables.\n\n\n\n\n\n\n\n\nSave Changes\n\n\n\nDon’t forget to rename your file as shown in “Working with HW. ipynb files”, Step-2, as you work on them.\n\n\n\n\n\nSearch for “Anaconda Navigator” in your computer’s applications or start menu.\nClick on “Anaconda Navigator” to open it.\n\n\n\n\nmacOs\n\n\n\n\n\nWindows\n\n\n\n\n\n\nIn Anaconda Navigator, locate the “Jupyter Notebook” tile and click the “Launch” button next to it. This will launch a local Jupyter server on your computer.\n\n\n\n\nLaunch Jupyter Notebook\n\n\n\n\n\n\nAfter the Jupyter server has started, your default web browser will open with the Jupyter Dashboard. This dashboard is a web-based interface to your Jupyter environment.\n\n\n\n\nJupyter Dashboard - macOs\n\n\n\n\n\nJupyter Dashboard - Windows\n\n\n\nYou can navigate through your file system using the dashboard to locate and access your files."
  },
  {
    "objectID": "homework.html#working-with-hw-.ipynb-files",
    "href": "homework.html#working-with-hw-.ipynb-files",
    "title": "Reminders",
    "section": "Working with HW .ipynb files",
    "text": "Working with HW .ipynb files\n\n\n\n\nStep 1: Open the HW1 File\n\nNavigate to your “Download” folder using the Jupyter Dashboard. You can use the file browser within the dashboard.\nIf asked to allow terminal access to the Download folder, click on “Allow”\n\n\n\n\nNavigate to Download Folder\n\n\n\n\n\nAllow access to Download Folder\n\n\n\nLook for the HW1 file within the “Download” folder.\nSelect the file by clicking on it. This will open a new Jupyter notebook or file editor for your HW1 file.\n\n\n\n\nOpen HW .ipynb file\n\n\n\n\nStep 2: Rename the HW File\n\nBefore you begin working on your HW, it’s necessay to rename the file to include your last name. This is how you’re expected to turn in your HW files.\n\nRight-click on the file.\nSelect “Rename.”\nChange the file name to “HW1_&lt;Your Last Name&gt;.”\n\n\n\n\n\nClick on File -&gt; Rename…\n\n\n\n\n\nRename the HW file by renaming it to ‘HW1_&lt;Last Name&gt;’\n\n\n\n\nStep 3: Work on Your HW\nYou can now work on your renamed HW assignment within Jupyter Notebook. When you’re done, remember to save your changes.\n\n\n\nSave changes\n\n\nYou’ve successfully launched a local Jupyter server using Anaconda Navigator, opened the HW1 file, and renamed files with your last name. Happy coding!"
  },
  {
    "objectID": "lecture_notes/week4-sense-HAT.html",
    "href": "lecture_notes/week4-sense-HAT.html",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 27). Week-4 Presentation: CSCI1010 Computer Science Orientation [Playing with the sense HAT.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n\n\n\nSlide 2\n\n\n\n\n\n Image and Animation Source: https://projects.raspberrypi.org/en/projects/getting-started-with-the-sense-hat/2\nImage Source: https://reference.wolfram.com/language/ref/device/SenseHAT.html\nSource: https://youtu.be/8NwWNOMqai4\n\n\n\n\n Starting point for further exploration: Getting started with Sense HAT\nImage Source: https://projects.raspberrypi.org/en/projects/getting-started-with-the-sense-hat/2\nSource: https://www.mathworks.com/help/supportpkg/raspberrypi/examples/auto-rotate-an-image-displayed-on-sense-hat-led-matrix.html\nSource: https://reference.wolfram.com/language/ref/device/SenseHAT.html\n\n\n\n\n\n\nSlide 5\n\n\nSource: https://youtu.be/kk_7KNuRLrk\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week4-sense-HAT.html#playing-with-the-sense-hat",
    "href": "lecture_notes/week4-sense-HAT.html#playing-with-the-sense-hat",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 27). Week-4 Presentation: CSCI1010 Computer Science Orientation [Playing with the sense HAT.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n\n\n\nSlide 2\n\n\n\n\n\n Image and Animation Source: https://projects.raspberrypi.org/en/projects/getting-started-with-the-sense-hat/2\nImage Source: https://reference.wolfram.com/language/ref/device/SenseHAT.html\nSource: https://youtu.be/8NwWNOMqai4\n\n\n\n\n Starting point for further exploration: Getting started with Sense HAT\nImage Source: https://projects.raspberrypi.org/en/projects/getting-started-with-the-sense-hat/2\nSource: https://www.mathworks.com/help/supportpkg/raspberrypi/examples/auto-rotate-an-image-displayed-on-sense-hat-led-matrix.html\nSource: https://reference.wolfram.com/language/ref/device/SenseHAT.html\n\n\n\n\n\n\nSlide 5\n\n\nSource: https://youtu.be/kk_7KNuRLrk\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week1-intro-cs1010.html",
    "href": "lecture_notes/week1-intro-cs1010.html",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 6). Week-1 Presentation: CSCI1010 Computer Science Orientation [Introduction to CSCI1010]. Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\nCourse Website: https://gwu-csci1010.github.io/\n\n\n\n\n\n\nSlide 2\n\n\nIcon Source: https://thenounproject.com/\nIcon credits: LUTFI GANI AL, Studion 365, DesignBite, Danil Polshin\n\n\n\n\n\n\nSlide 3\n\n\n\n\n\n\n\n\nSlide 4\n\n\n\n\n\n\n\n\nSlide 5\n\n\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\n Justice, Equality, Diversity, Inclusion (JEDI): https://www.cs.seas.gwu.edu/justice-equity-diversity-and-inclusion-jedi-committee\n\n\n\n Disability Support: https://disabilitysupport.gwu.edu/\n\n\n\n\n\n\nSlide 9\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week1-intro-cs1010.html#introduction-to-cs1010",
    "href": "lecture_notes/week1-intro-cs1010.html#introduction-to-cs1010",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 6). Week-1 Presentation: CSCI1010 Computer Science Orientation [Introduction to CSCI1010]. Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\nCourse Website: https://gwu-csci1010.github.io/\n\n\n\n\n\n\nSlide 2\n\n\nIcon Source: https://thenounproject.com/\nIcon credits: LUTFI GANI AL, Studion 365, DesignBite, Danil Polshin\n\n\n\n\n\n\nSlide 3\n\n\n\n\n\n\n\n\nSlide 4\n\n\n\n\n\n\n\n\nSlide 5\n\n\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\n Justice, Equality, Diversity, Inclusion (JEDI): https://www.cs.seas.gwu.edu/justice-equity-diversity-and-inclusion-jedi-committee\n\n\n\n Disability Support: https://disabilitysupport.gwu.edu/\n\n\n\n\n\n\nSlide 9\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week4-python-libraries.html",
    "href": "lecture_notes/week4-python-libraries.html",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 27). Week-4 Presentation: CSCI1010 Computer Science Orientation [Short walk into Python libraries.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n Sources:\nhttps://numpy.org/\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.0.html\nhttps://numpy.org/doc/stable/user/absolute_beginners.html\n\n\n\n Sources:\nhttps://matplotlib.org/\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.1.html\nCreate publication quality plots.\nCustomize visual style and layout.\nExport to many file formats.\nUse a rich array of third-party packages built on Matplotlib.\n\n\n\n Sources:\nhttps://pandas.pydata.org/\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.1.html\n\n\n\n\n\n\nSlide 5\n\n\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "lecture_notes/week4-python-libraries.html#short-walk-into-python-libraries",
    "href": "lecture_notes/week4-python-libraries.html#short-walk-into-python-libraries",
    "title": "CSCI 1010 [Fall 2023]",
    "section": "",
    "text": "Referencing this presentation:\nBulusu, Kartik V. (2023, October 27). Week-4 Presentation: CSCI1010 Computer Science Orientation [Short walk into Python libraries.] Department of Computer Science, The George Washington University. https://gwu-csci1010.github.io\n\n\n\n\n\n\nCourse materials developed by Prof. Kartik Bulusu for CS1010-Fall 2023.\n\n\n\n\n\n\n\n\nSlide 1\n\n\n\n\n\n Sources:\nhttps://numpy.org/\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.0.html\nhttps://numpy.org/doc/stable/user/absolute_beginners.html\n\n\n\n Sources:\nhttps://matplotlib.org/\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.1.html\nCreate publication quality plots.\nCustomize visual style and layout.\nExport to many file formats.\nUse a rich array of third-party packages built on Matplotlib.\n\n\n\n Sources:\nhttps://pandas.pydata.org/\nhttps://www2.seas.gwu.edu/~cs4all/1012/unit2/module2.1.html\n\n\n\n\n\n\nSlide 5\n\n\n\n\n\n\n\n\nSlide 6\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computer Science Orientation",
    "section": "",
    "text": "Hands-on exploration of the possibilities in Computer Science\n\n\n\n\n\n\n\nLocation change\n\n\n\nThe location for the lecture for this Friday, November 3 only, has been moved to MPA B07 because of the Inauguration events.\nLocation: MPA B07, School of Media & Public Affairs\n805 21st St NW #400, Washington, DC 20052\nB07 is located in the basement.\n\n\n\n\n\nCourse and Contact Information\n\n\n\nCSCI 1010: Computer Science Orientation\nSemester: Fall 2023\nCredits: 1\nLecture location and meeting times:\n\nDuques 151\nFriday 9:35 AM — 10:25 AM\n\nLab location and meeting times:\n\nSEH 1300 & SEH 1400 & SEH 1450\nLab section 30: Friday 10:40 AM - 12:15 PM\nLab section 31: Friday 12:45 PM - 2:10 PM\n\nCourse website: TBA \nInstructor information can be found here\n\n\n\n  \n\n\n\n\n\nGithub Repo (updated weekly)\ngit clone TBA\n\n\nCourse description\nThis is an introductory course designed for first year engineering students majoring in computer science. The course will introduce the students to basics, emerging concepts, and applications of Computer Science, to computing and modeling using Python and projects using Raspberry Pi (Model: 4B). Course will consist of\n\nlectures on the various disciplines in Computer Science,\nhands-on Python programming exercises and\nhands-on exercises and in-class projects using Raspberry Pi 4B single-board computer.\n\nThe students will work on the following two engineering innovation projects:\n\nGuided-python programming project and\nWill have the option of choosing a final Raspberry Pi 4B-based project or a python programming project to address an impending need in engineering-innovation\n\nThrough the above course activities students will be exposed to computing, technical resources and presentations on various aspects in the field of computer science. The students will get access to a “slack-workspace” for this course, that will facilitate offline discussions among themselves and the instruction team. The students will also be provided lecture presentationsand video summaries whenever possible and made available on the course webpage and / or blackboard.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "policies.html",
    "href": "policies.html",
    "title": "Course policies",
    "section": "",
    "text": "For example:\n\n\n\n\n\n\nAttendance and/or peer-to-peer and instructor interactions 10%\nIn-class work and Weekly Quizzes 10%\nPython programming and other Homework 30%\nProjects (including code, demo and presentation) 50%\n\n30% Individual midterm project\n20% Group final project There is no required final exam.\n\n\n\n\n \n\nexam by pongsakorn from Noun Project"
  },
  {
    "objectID": "policies.html#assignments-and-grades",
    "href": "policies.html#assignments-and-grades",
    "title": "Course policies",
    "section": "",
    "text": "For example:\n\n\n\n\n\n\nAttendance and/or peer-to-peer and instructor interactions 10%\nIn-class work and Weekly Quizzes 10%\nPython programming and other Homework 30%\nProjects (including code, demo and presentation) 50%\n\n30% Individual midterm project\n20% Group final project There is no required final exam.\n\n\n\n\n \n\nexam by pongsakorn from Noun Project"
  },
  {
    "objectID": "policies.html#additional-important-information-about-grading-policy",
    "href": "policies.html#additional-important-information-about-grading-policy",
    "title": "Course policies",
    "section": "Additional important information about grading policy:",
    "text": "Additional important information about grading policy:\n\nLate submissions on Homework and projects will not be acceptable.\nAny questions or follow up about the assignments will be done only within 2 weeks of submission deadline.\n\nFollowing the week after the submission deadline no further discussion on the assignment will be done."
  },
  {
    "objectID": "policies.html#classroom-policies-and-student-responsibilities",
    "href": "policies.html#classroom-policies-and-student-responsibilities",
    "title": "Course policies",
    "section": "Classroom Policies and Student responsibilities",
    "text": "Classroom Policies and Student responsibilities\n\n\n\nThis course requires a combination of individual and group work entailing hands-on activities and frequent interactions with the instructional team. The lectures, labs and office hours are available for interacting with your group and the instruction team. In addition, a course messaging platform (Slack) is made available for the students to interact in groups and with the instruction team asynchronously. We ask that all students adhere to the course policies throughout the duration of the semester.\n\n\n\n \n\nclassroom by Chattapat from Noun Project\n\n\n\n\n\nBe respectful: Listen to the instructors. Keep an open mind to the course material presented. Limit the use of personal devices. Be aware that you are working in a group. Be mindful of your colleagues.\nBe responsible: Arrive on time. Attendance is the first pathway toward success. Submit the course deliverables on time. Help your team members.\nBe a communicator: Observe, Ask questions and Try out the materials presented during the course. Communicate with your team effectively and politely.\nBe a problem solver: Explore options to complete hands-on tasks. Make your own notes. Stay positive about the course outcomes."
  },
  {
    "objectID": "policies.html#justice-equity-diversity-inclusion-jedi-statement",
    "href": "policies.html#justice-equity-diversity-inclusion-jedi-statement",
    "title": "Course policies",
    "section": "Justice, Equity, Diversity, Inclusion (JEDI) statement",
    "text": "Justice, Equity, Diversity, Inclusion (JEDI) statement\n\n\n\nThe instruction team intends to students from all diverse backgrounds and perspectives by this course, The diversity that the students bring to this class be viewed as a resource, strength, and benefit. The course materials and activities presented in this course are intended to be respectful of: age, race, ethnicity, country of origin, language, religion, spiritual practice, sexual orientation, gender identity or expression, introversion/extroversion personality dimensions, and socioeconomic and mental/physical status.\n\n\n\n \n\nemployee diversity by Bold Yellow from Noun Project\n\n\n\n\n\nPlease let the main instructor know ways to improve the effectiveness of the course. See JEDI resources for student resources."
  },
  {
    "objectID": "policies.html#use-of-chatgpt-or-any-other-ai-based-models-for-in-class-work-and-deliverables",
    "href": "policies.html#use-of-chatgpt-or-any-other-ai-based-models-for-in-class-work-and-deliverables",
    "title": "Course policies",
    "section": "Use of chatGPT or any other AI-based models for in-class work and deliverables",
    "text": "Use of chatGPT or any other AI-based models for in-class work and deliverables\nThe use chatGPT or any other genreative AI-based tool is NOT PERMITTED.  Furthermore, the ethical issues regarding the use of chatGPT or any other AI-based models will be discussed in-class and course policy will be ammended according to the findings. The findings of any such discussions will be summarized and placed in-context of the Academic Integrity Code\n Resources that will guide the course policy changes during the course: \n\n\nchatGPT Course policy formulation\n\n\nchatGPT chatbot\n\n\nHow ChatGPT Could Transform Higher Education"
  },
  {
    "objectID": "policies.html#use-of-electronic-course-materials-and-class-recordings",
    "href": "policies.html#use-of-electronic-course-materials-and-class-recordings",
    "title": "Course policies",
    "section": "Use of Electronic Course Materials and Class Recordings",
    "text": "Use of Electronic Course Materials and Class Recordings\nStudents are encouraged to use electronic course materials, including recorded class sessions (if any), for private personal use in connection with their academic program of study. Electronic course materials and recorded class sessions should not be shared or used for non-course related purposes unless express permission has been granted by the instructor. Students who impermissibly share any electronic course materials are subject to discipline under the Student Code of Conduct. Please contact the instructor if you have questions regarding what constitutes permissible or impermissible use of electronic course materials and/or recorded class sessions. Please contact Disability Support Services if you have questions or need assistance in accessing electronic course materials."
  },
  {
    "objectID": "policies.html#university-policy-on-religious-holidays",
    "href": "policies.html#university-policy-on-religious-holidays",
    "title": "Course policies",
    "section": "University Policy on Religious Holidays",
    "text": "University Policy on Religious Holidays\n\nStudents should notify faculty during the first week of the semester of their intention to be absent from class on their day(s) of religious observance.\nFaculty should extend to these students the courtesy of absence without penalty on such occasions, including permission to make up examinations.\nFaculty who intend to observe a religious holiday should arrange at the beginning of the semester to reschedule missed classes or to make other provisions for their course‐related activities. For details and policy, see “Religious Holidays” at https://provost.gwu.edu/policies-procedures-and-guidelines"
  },
  {
    "objectID": "policies.html#support-for-students-outside-the-classroom",
    "href": "policies.html#support-for-students-outside-the-classroom",
    "title": "Course policies",
    "section": "Support for Students Outside the Classroom",
    "text": "Support for Students Outside the Classroom\nDisability Support Services (DSS): Any student who may need an accommodation based on the potential impact of a disability should contact the Disability Support Services office at 202‐994‐8250 in the Rome Hall, Suite 102, to establish eligibility and to coordinate reasonable accommodations. For additional information please refer to: https://disabilitysupport.gwu.edu/\nCounseling & Psychological Services: The University’s Mental Health Services offers 24/7 assistance and referral to address students’ personal, social, career, and study skills problems. Services for students include: crisis and emergency mental health consultations confidential assessment, counseling services (individual and small group), and referrals. https://healthcenter.gwu.edu/counseling-and-psychological-services\nCampus safety and security: The following links can be accessed to learn more about the Safety and Security at the George Washington University\n\nFor help in an emergency, call 911 or GW Police 202-994-6111 (GWPD)\nAdditional resources for student safety and security can be found at this link: https://studentlife.gwu.edu/safety-and-security"
  },
  {
    "objectID": "policies.html#academic-integrity-code",
    "href": "policies.html#academic-integrity-code",
    "title": "Course policies",
    "section": "Academic Integrity Code",
    "text": "Academic Integrity Code\nAcademic dishonesty is defined as cheating of any kind, including misrepresenting one’s own work, taking credit for the work of others without crediting them and without appropriate authorization, and the fabrication of information. You are not allowed to collaborate on the home works and lab assignments; for programming projects and hardware lab assignments, you can work in teams only if they are designated as team projects (labs). Unless otherwise specified, you cannot search for solutions or code on the web – but you can use any code that is included in the textbook or lecture notes (but please cite them). I will be using a SW tool that checks for program code similarities – any pair of programs or written reports with greater than 10% similarity will be closely examined.\nThe Office of Academic Integrity maintains a permanent record of the violation. More information is available from the Office of Academic Integrity at https://studentconduct.gwu.edu/academic-integrity. The University’s “Guide of Academic Integrity in Online Learning Environments” is available at https://studentconduct.gwu.edu/guide-academic-integrity-online-learning-environments. Contact information: rights@gwu.edu or 202-994-6757.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The goal of the course is to introduce the students to the building blocks of the IoT ecosystem with emphasis on Edge Computing."
  },
  {
    "objectID": "about.html#goal",
    "href": "about.html#goal",
    "title": "About",
    "section": "",
    "text": "The goal of the course is to introduce the students to the building blocks of the IoT ecosystem with emphasis on Edge Computing."
  },
  {
    "objectID": "about.html#learning-objectives",
    "href": "about.html#learning-objectives",
    "title": "About",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nHands-on knowledge of Raspberry Pi hardware with Python programming language\nExposure to various sensors with hands-on exercises\nImplement innovative Raspberry Pi-based projects that interact with the physical world"
  },
  {
    "objectID": "about.html#learning-outcomes",
    "href": "about.html#learning-outcomes",
    "title": "About",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\nAs a result of completing this course, students will be able to:\n\nUnderstand the various areas of work and research in Computer Science.\nPerform experiments aimed at collecting and analyzing data.\nDesign and write Python programs.\nWork on an engineering-innovation group project.\n\nAdditional Learning Outcomes: - an ability to apply knowledge of computer science and mathematics - an ability to design and conduct experiments, as well as to analyze and interpret data - an ability to identify, formulate, and solve engineering problems - an ability to use the techniques, skills, and modern computing tools necessary for practice of computer science."
  },
  {
    "objectID": "about.html#course-format",
    "href": "about.html#course-format",
    "title": "About",
    "section": "Course format",
    "text": "Course format\n\nLectures on the fundamentals of Raspberry Pi programming using Python programming language, sensors and automation.\n\\(\\mu-labs\\): Hands-on and guided Raspberry Pi activities in a laboratory setting.\nGuest lectures from academic experts and alumni in the field of computer science\nInteractive quizzes and instant concept checks\nIndividual and/or group assignments and projects\nMidterm and Final projects"
  },
  {
    "objectID": "about.html#audience-and-credit-level",
    "href": "about.html#audience-and-credit-level",
    "title": "About",
    "section": "Audience and credit-level",
    "text": "Audience and credit-level\nThe course is designed for first-year undergraduate students as a 1-credit course."
  },
  {
    "objectID": "about.html#prerequisites",
    "href": "about.html#prerequisites",
    "title": "About",
    "section": "Prerequisites",
    "text": "Prerequisites\nNone"
  },
  {
    "objectID": "about.html#time-requirements-and-expectations",
    "href": "about.html#time-requirements-and-expectations",
    "title": "About",
    "section": "Time Requirements and Expectations",
    "text": "Time Requirements and Expectations\nThis course will have 50 minutes of lecture time per week, approximately 90 minutes of laboratory, review, and discussion per week, and will require 2 hours per week on average for homework assignments."
  },
  {
    "objectID": "about.html#textbook-hardware-and-other-course-material",
    "href": "about.html#textbook-hardware-and-other-course-material",
    "title": "About",
    "section": "Textbook, hardware and other course material",
    "text": "Textbook, hardware and other course material\nThere is no textbook requirement for this course. All reading, hardware and course material will be provided by the instructor.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2022 All rights reserved"
  },
  {
    "objectID": "download/Week5/HW4.html",
    "href": "download/Week5/HW4.html",
    "title": "CS1010 Assignment 4",
    "section": "",
    "text": "Prof. Kartik Bulusu [CS & MAE]"
  },
  {
    "objectID": "download/Week5/HW4.html#question-1.",
    "href": "download/Week5/HW4.html#question-1.",
    "title": "CS1010 Assignment 4",
    "section": "Question 1.",
    "text": "Question 1.\nWe have provided a homework csv file in the Week4 folder named HW4.csv, pull this data into a dataframe called my_df and display the first 6 rows of the dataframe\nHints: - use pd.read_csv() with an appropriate filename! - use my_df.head(number_of_rows)\n\n# YOUR CODE HERE"
  },
  {
    "objectID": "download/Week5/HW4.html#question-2.",
    "href": "download/Week5/HW4.html#question-2.",
    "title": "CS1010 Assignment 4",
    "section": "Question 2.",
    "text": "Question 2.\nPull the columns into numpy arrays using dataframe slicing my_df.loc[SLICE].values. Save the Time column to a variable named t, save the Signal 1 column to a variable named v1 and the Signal 2 column to a variable named v2\n\n# YOUR CODE HERE"
  },
  {
    "objectID": "download/Week5/HW4.html#question-3.",
    "href": "download/Week5/HW4.html#question-3.",
    "title": "CS1010 Assignment 4",
    "section": "Question 3.",
    "text": "Question 3.\n\nSet up a 1x1 subplot using fig, ax = plt.subplots(figsize=(WIDTH, HEIGHT)). Choose a figsize that looks good!\nPlot t on the x-axis and the two signals v1 and v2 on the y-axis. Create a legend that labels each signal\nCreate appropriate x-axis and y-axis labels. Make sure to include units. Time is given in seconds and signal is given in volts\nGive the plot an appropriate title\nTurn the grid on\n\n\n# YOUR CODE HERE"
  },
  {
    "objectID": "download/Week5/HW4.html#question-4.",
    "href": "download/Week5/HW4.html#question-4.",
    "title": "CS1010 Assignment 4",
    "section": "Question 4.",
    "text": "Question 4.\n\nNow plot the same two signals, but this time on side by side plots.\nPlot v1 on the left and v2 on the right.\nChange the color of your left plot to red and the right plot to black.\nInclude a piece of text on the left plot that says \"My plot\"\n\nHints:\n\nUse plt.subplots(1,2,figsize=(WIDTH, HEIGHT)) and appropriate variables for the figure and axes. Choose a figsize that looks good!\nUse axs[LEFT].plot(t,v1) to plot on the left, and similar on the right\nEdit the color in the plot statement. 'r' is the character for red, and 'k' is the character for black\nUse the ax.text(X, Y, STRING) to add the word in step 4.\n\n\nBonus\nAdd axis labels, update the linestyle, subplot titles, and something unique from section 5 of the demo you think is cool! There’s lots of opportunities to make it your own!\n\n# YOUR CODE HERE"
  },
  {
    "objectID": "download/Week5/HW4.html#congrats",
    "href": "download/Week5/HW4.html#congrats",
    "title": "CS1010 Assignment 4",
    "section": "Congrats!!",
    "text": "Congrats!!\nYou completed your 4th Python Assignment in CS 1010! Give yourself a round of applause!!"
  },
  {
    "objectID": "realvnc-windows.html",
    "href": "realvnc-windows.html",
    "title": "RealVNC Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing and setting up RealVNC on your Windows computer to enable remote desktop access.\n\n\nBefore you begin, ensure you meet the following requirements:\n\nA Windows computer running a supported version of Windows (e.g., Windows 10, Windows 8, Windows 7).\nInternet access.\n\n\n\nOpen your web browser and go to the RealVNC website at https://www.realvnc.com/en/connect/download/combined/. Click on the “Download VNC Viewer” button.\n\n\n\nDownload VNC Viewer\n\n\n\n\n\nLocate the downloaded installer file (e.g., VNC-Viewer-*.exe) and double-click it to run the installer. Once the installation is complete, click “Finish” to exit the installer.\n\n\n\nOpen Installer\n\n\n\n\n\nRun Installer\n\n\n\n\n\nThe installation wizard will guide you through the installation process. Click on “Customize installation” and “Deselect RealVNC Server” and hit “Install”.\n\n\n\nCustomize Installation\n\n\n\n\n\nDeselect RealVNC Server\n\n\n\n\n\nOnce the installation is complete, you can launch RealVNC Viewer by clicking on the “Launch” button or launch it from Start. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC\n\n\n\n\n\nDon’t Sign up"
  },
  {
    "objectID": "realvnc-windows.html#prerequisites",
    "href": "realvnc-windows.html#prerequisites",
    "title": "RealVNC Installation Guide for Windows",
    "section": "",
    "text": "Before you begin, ensure you meet the following requirements:\n\nA Windows computer running a supported version of Windows (e.g., Windows 10, Windows 8, Windows 7).\nInternet access.\n\n\n\nOpen your web browser and go to the RealVNC website at https://www.realvnc.com/en/connect/download/combined/. Click on the “Download VNC Viewer” button.\n\n\n\nDownload VNC Viewer\n\n\n\n\n\nLocate the downloaded installer file (e.g., VNC-Viewer-*.exe) and double-click it to run the installer. Once the installation is complete, click “Finish” to exit the installer.\n\n\n\nOpen Installer\n\n\n\n\n\nRun Installer\n\n\n\n\n\nThe installation wizard will guide you through the installation process. Click on “Customize installation” and “Deselect RealVNC Server” and hit “Install”.\n\n\n\nCustomize Installation\n\n\n\n\n\nDeselect RealVNC Server\n\n\n\n\n\nOnce the installation is complete, you can launch RealVNC Viewer by clicking on the “Launch” button or launch it from Start. If prompted to Log in/Sign Up hit “Cancel”, you’re NOT REQUIRED to sign up.\n\n\n\nOpen RealVNC\n\n\n\n\n\nDon’t Sign up"
  },
  {
    "objectID": "anaconda-windows.html",
    "href": "anaconda-windows.html",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your Windows computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing.\n\n\n\nBefore you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nSufficient disk space for the installation.\n\n\n\n\n\n\nVisit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the Windows section to download the Anaconda installer for Windows.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation type. It’s recommended to select “Just me” unless you have specific reasons for a different choice.\n\n\n\n\nInstallation Type\n\n\n\nSelect the installation location (the default is usually fine).\n\n\n\n\nInstallation Location\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Next” button and proceed to finish.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched\n\n\n\n\n\n\nCongratulations! You’ve successfully installed Anaconda on your Windows computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "anaconda-windows.html#introduction",
    "href": "anaconda-windows.html#introduction",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "This guide will walk you through the process of installing Anaconda, a popular Python distribution, on your Windows computer. Anaconda provides a convenient way to manage Python packages and environments for data science and scientific computing."
  },
  {
    "objectID": "anaconda-windows.html#prerequisites",
    "href": "anaconda-windows.html#prerequisites",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "Before you begin, ensure you have the following:\n\nA Windows computer.\nAn internet connection.\nSufficient disk space for the installation."
  },
  {
    "objectID": "anaconda-windows.html#installation-steps",
    "href": "anaconda-windows.html#installation-steps",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "Visit the Anaconda download page at https://www.anaconda.com/download.\n\n\n\nClick on the “Download” button under the Windows section to download the Anaconda installer for Windows.\n\n\n\nDownload Anaconda\n\n\n\n\n\n\nLocate the downloaded file (usually in your “Downloads” folder).\nDouble-click the installer executable (.exe) file to run it.\n\n\n\n\nRun Installer\n\n\n\n\n\n\nFollow the on-screen instructions to begin the installation.\nRead and accept the license agreement when prompted.\n\n\n\n\nRead Me\n\n\n\n\n\nLicense Agreement\n\n\n\nChoose the installation type. It’s recommended to select “Just me” unless you have specific reasons for a different choice.\n\n\n\n\nInstallation Type\n\n\n\nSelect the installation location (the default is usually fine).\n\n\n\n\nInstallation Location\n\n\n\n\n\nClick the “Install” button to begin the installation process. This may take a few minutes.\n\n\n\nInstall\n\n\n\n\n\nOnce the installation is complete, you will see a confirmation message. Click the “Next” button and proceed to finish.\n\n\n\nInstallation Complete\n\n\n\n\n\nClose Installation Wizard\n\n\n\n\n\n\n\n\nDon’t Update\n\n\n\n\n\n\n\n\nDon’t Log in/Sign up\n\n\n\n\n\n\nTo verify the installation launch a local Jupyter Server by clicking on the “launch” button for Jupyter Notebook.\n\n\n\nLaunch Jupyter Server\n\n\nYou should see a Jupyter Notebbok server launched in a browser window.\n\n\n\nJupyter Server Launched"
  },
  {
    "objectID": "anaconda-windows.html#conclusion",
    "href": "anaconda-windows.html#conclusion",
    "title": "Anaconda Installation Guide for Windows",
    "section": "",
    "text": "Congratulations! You’ve successfully installed Anaconda on your Windows computer. You can now use Anaconda to create Python environments, manage packages, and work on data science projects.\nFor more information on using Anaconda, refer to the official documentation at https://docs.anaconda.com/.\nIf you encounter any issues or have questions, don’t hesitate to seek help from the Anaconda community or consult the documentation for troubleshooting tips.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "install-editor.html",
    "href": "install-editor.html",
    "title": "Installing an Editor",
    "section": "",
    "text": "Running your First Program\n\n\nIn the world of programming, an editor is more than just a text processor. It’s your creative workspace where you bring your code to life. Here are some key aspects of code editors:\n\nText Editing: At its core, an editor allows you to write, edit, and organize code in various programming languages. It provides features like syntax highlighting, auto-indentation, and code completion to enhance your coding experience.\nCode Execution: Some editors, like Jupyter Notebook, not only allow you to write code but also execute it in an interactive and step-by-step manner. This is especially useful for data analysis and experimentation.\nExtensions and Plugins: Code editors are highly customizable. You can enhance their functionality by installing extensions or plugins tailored to your needs. For example, you can add Python-specific tools or themes to make your editor visually appealing.\nIntegrated Development Environments (IDEs): Some editors, such as Visual Studio Code (VS Code), go beyond text editing and offer a complete integrated development environment with debugging capabilities, version control integration, and more.\nCollaboration: Many editors support collaborative coding, allowing multiple programmers to work on the same codebase simultaneously, which is crucial for group projects.\n\nIn your CSCI1010 class, you’ll use a combination of Anaconda, Jupyter, and VS Code:\n\nAnaconda: Anaconda is a Python distribution that simplifies package management and environment setup. It’s particularly valuable for data science projects, as it comes with a wide array of pre-installed libraries and tools.\nJupyter: Jupyter Notebook is an interactive environment that enables you to create and share documents containing live code, equations, visualizations, and narrative text. It’s an excellent choice for data analysis and presenting your findings.\nVS Code: Visual Studio Code (VS Code) is a versatile code editor that supports multiple programming languages and offers a rich ecosystem of extensions. Its user-friendly interface and powerful features make it a great choice for general programming tasks.\n\nThese tools will empower you throughout your CSCI1010 journey, helping you write, execute, and collaborate on code effectively. Select the appropriate option for your operating system, follow the installation instructions, and dive into the world of coding with confidence!\n\n\n\n\n\n\nStep 1: Install Anaconda for Mac\nStep 2: Install Real VNC\nStep 3: Install VS Code for Mac\nStep 4: Connect to the Raspberry Pi\nStep 5: Install Python and Jupyter without Anaconda\n\n\n\n\n\nStep 1: Install Anaconda for Windows\nStep 2: Install Real VNC\nStep 3: Install VS Code for Windows\nStep 4: Connect to the Raspberry Pi\nStep 5: Install Python and Jupyter without Anaconda\n\nChoose the option that best suits your needs and follow the respective installation instructions.\nOnce you have an editor installed, you can start writing and running your code. Happy coding!\nAlso, once you’ve finished installation Steps 1 and 2, fill out the Installation Check-In form and the CS1010 Entry form. Both the forms are MANDATORY to be filled out before the first class.\n\n\n\n\n\nContent generated using ChatGPT.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "install-editor.html#what-is-an-editor",
    "href": "install-editor.html#what-is-an-editor",
    "title": "Installing an Editor",
    "section": "",
    "text": "In the world of programming, an editor is more than just a text processor. It’s your creative workspace where you bring your code to life. Here are some key aspects of code editors:\n\nText Editing: At its core, an editor allows you to write, edit, and organize code in various programming languages. It provides features like syntax highlighting, auto-indentation, and code completion to enhance your coding experience.\nCode Execution: Some editors, like Jupyter Notebook, not only allow you to write code but also execute it in an interactive and step-by-step manner. This is especially useful for data analysis and experimentation.\nExtensions and Plugins: Code editors are highly customizable. You can enhance their functionality by installing extensions or plugins tailored to your needs. For example, you can add Python-specific tools or themes to make your editor visually appealing.\nIntegrated Development Environments (IDEs): Some editors, such as Visual Studio Code (VS Code), go beyond text editing and offer a complete integrated development environment with debugging capabilities, version control integration, and more.\nCollaboration: Many editors support collaborative coding, allowing multiple programmers to work on the same codebase simultaneously, which is crucial for group projects.\n\nIn your CSCI1010 class, you’ll use a combination of Anaconda, Jupyter, and VS Code:\n\nAnaconda: Anaconda is a Python distribution that simplifies package management and environment setup. It’s particularly valuable for data science projects, as it comes with a wide array of pre-installed libraries and tools.\nJupyter: Jupyter Notebook is an interactive environment that enables you to create and share documents containing live code, equations, visualizations, and narrative text. It’s an excellent choice for data analysis and presenting your findings.\nVS Code: Visual Studio Code (VS Code) is a versatile code editor that supports multiple programming languages and offers a rich ecosystem of extensions. Its user-friendly interface and powerful features make it a great choice for general programming tasks.\n\nThese tools will empower you throughout your CSCI1010 journey, helping you write, execute, and collaborate on code effectively. Select the appropriate option for your operating system, follow the installation instructions, and dive into the world of coding with confidence!\n\n\n\n\n\n\nStep 1: Install Anaconda for Mac\nStep 2: Install Real VNC\nStep 3: Install VS Code for Mac\nStep 4: Connect to the Raspberry Pi\nStep 5: Install Python and Jupyter without Anaconda\n\n\n\n\n\nStep 1: Install Anaconda for Windows\nStep 2: Install Real VNC\nStep 3: Install VS Code for Windows\nStep 4: Connect to the Raspberry Pi\nStep 5: Install Python and Jupyter without Anaconda\n\nChoose the option that best suits your needs and follow the respective installation instructions.\nOnce you have an editor installed, you can start writing and running your code. Happy coding!\nAlso, once you’ve finished installation Steps 1 and 2, fill out the Installation Check-In form and the CS1010 Entry form. Both the forms are MANDATORY to be filled out before the first class.\n\n\n\n\n\nContent generated using ChatGPT.\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Sample class schedule [week-by-week]\n\n\n\n\n\n\nThe course schedule is subject to changes during the semester.\n\n\n\n\n\n\n\n\n\nLocation change\n\n\n\nThe location for the lecture for this Friday, November 3 only, has been moved to MPA B07 because of the Inauguration events.\nLocation: MPA B07, School of Media & Public Affairs\n805 21st St NW #400, Washington, DC 20052\nB07 is located in the basement.\n\n\n\n\n\n\n\n\nGuided Python Project released\n\n\n\nGuided-Python Project on COVID-19 Data Analysis is released, the project files are available under Week 4.\nNOTE: This is an individual project and it is due on November 10, 2023 by 11:59 PM. Please review important information on university polices on collaboration among students before submitting your course deliverables.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTopic(s)\n\n\n\\(\\mu\\)-LABs and Assignment(s) due\n\n\nDownload Files\n\n\n\n\n\n\n\nWeek 1 [10/06/2023]\n\n\n\n\nOverview of CS1010 by Prof. Kartik Bulusu\n\n\nIntroduction to Computer Science Department by Prof. Rebecca Hwa\n\n\nIntroduction to Raspberry Pi and Python programming by Prof. Kartik Bulusu\n\n\n\n\n\n\nPython programming using Anaconda Python Distribution\n\n\nIn-class Raspberry Pi Lab (Blinking LEDs)\n\n\n5-min Standup talk by: Marlee Alvino\n\n\nHW 1 Assigned\n\n\n\n\n\nIn-class Python Exercise \n\n\nHW1 \n\n\n\n\nWeek 2 [10/13/2023]\n\n\n\nFall Break, NO CLASS!\n\n\n\n\n\n\nWeek 3 [10/20/2023]\n\n\n\n\nVery brief introduction to matrices by Prof. Kartik Bulusu\n\n\nIntroduction to Computer Grpahics by Prof. James Hahn (Institute of Computer Graphics)\n\n\nSlide deck by Prof. James Hahn \n\n\n\n\n\n\nHandling data arrays and plotting data using Python\n\n\nIn-class Raspberry Pi Lab (Ultrasonic cacophony)\n\n\n5-min Standup talk by: Samantha Kusner\n\n\nHW 1 due date (Tuesday, October 17, 2023)\n\n\nHW 2 Assigned\n\n\n\n\n\nIn-class Python Exercise & HW2 \n\n\n\n\nWeek 4 [10/27/2023]\n\n\n\n\nShort walk into Python Libraries\n\n\nCryptography and Secure Computation by Prof. Arkady Yerukhimovich\n\n\nIntroduction to Augmented and Virtual Reality Technologies by Prof. Hurriyet Ok\n\n\n\n\n\n\nLearning about dataframe using Pandas in Python\n\n\nIn-class Raspberry Pi Lab using senseHats\n\n\n5-min Standup talk by: Kate Halushka\n\n\nHW 2 due date (Saturday, October 28, 2023 5:00 PM)\n\n\nHW 3 Assigned\n\n\n\n\n\nHW3 \n\n\nCOVID-19 Data Analysis Project \n\n\n\n\n\n\nWeek 5 [11/03/2023]\n\n\n\n\nComputer Vision by Prof. Robert Pless (Website TBA)\n\n\nComputer Vision and Natural Language Processing applied to BioMed by Prof. Kinga Dobolyi (Website TBA)\n\n\n\n\n\n\nIn-class Raspberry Pi Lab using Pi NOIR camera\n\n\nHW 3 due date (Friday, November 03, 2023)\n\n\nHW 4 Assigned\n\n\n\n\n\nIn-class Python Exercise & HW4 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIn accordance with university policy, the final exams will be given during the final exam period and not the last week of the semester.\n\n\n\n\n\nThis is a Quarto website. To learn more about Quarto websites visit https://quarto.org/docs/websites. Author: Kartik Bulusu Contact: bulusu © 2023 All rights reserved"
  }
]